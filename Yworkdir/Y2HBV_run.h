
//----------------------------------------------------
// project: HBV_run     header generated by YAO version v.9
//----------------------------------------------------

// ¤ ¤ ¤ ¤ ¤ ¤ ¤ ¤ LES FONCTIONS PREDEFINIES
/*M1_TBTOG   */ 
void YtabTOgrad_TC(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_TC; ++Yws){
			 YG_TC(Yws, Yw1) = tab[Y3windice]; ++Y3windice;}}
}/*M1_GEQPD */ 
void YgradEQPdelta_TC(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TC; ++Yws){
			 YG_TC(Yws, Yw1) = YD_TC(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPS */ 
void YdeltaEQPstate_TC(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TC; ++Yws){
			 YD_TC(Yws, Yw1, Ywt) = YS_TC(Yws, Yw1) * pfact;}}}
}/*M1_DEQPG */ 
void YdeltaEQPgrad_TC(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TC; ++Yws){
			 YD_TC(Yws, Yw1, Ywt) = YG_TC(Yws, Yw1) * pfact;}}}
}/*M1_SEQPD */ 
void YstateEQPdelta_TC(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TC; ++Yws){
			 YS_TC(Yws, Yw1) = YD_TC(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPOD */ 
void YstateEQPOdelta_TC(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TC; ++Yws){
			 YS_TC(Yws, Yw1) = YD_TC(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTD */ 
void YstateEQAPTdelta_TC(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TC; ++Yws){
			 YS_TC(Yws, Yw1) = YD_TC(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQV */ 
void YgradEQval_TC(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_TC; ++Yws){
			 YG_TC(Yws, Yw1) = val;}}
}/*M1_GEQPS */ 
void YgradEQPstate_TC(double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_TC; ++Yws){
			 YG_TC(Yws, Yw1) = YS_TC(Yws, Yw1) * pfact;}}
}/*M1_GEQPOS */ 
void YgradEQPOstate_TC(double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_TC; ++Yws){
			 YG_TC(Yws, Yw1) = YS_TC(Yws, Yw1) * (pfact*(1+Ygetval(codop)));}}
}/*M1_STOTB   */ 
void YstateTOtab_TC(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_TC; ++Yws){
			 tab[Y3windice] = YS_TC(Yws, Yw1); ++Y3windice;}}
}/*M1_GTOTB   */ 
void YgradTOtab_TC(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_TC; ++Yws){
			 tab[Y3windice] = YG_TC(Yws, Yw1); ++Y3windice;}}
}/*M1_RGRAD*/ 
void Yrazgrad_TC()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_TC; ++Yws){
			 YTC(Yw1)->Ygrad[Yws] = 0.0;}}
}/*M1_SETA*/ 
void Ysetstate_TC(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_TC; ++Yws){
			 YTC(Yw1)->Ystate[Yws] = val;}}
}/*M1_YIOTU*/ 
void Yio_TC(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("TC", Yws, Yw1, Yw2, Yw3, Ywt, &YS_TC(Yws, Yw1), val);
}/*M1_CREY*/ 
void Ycreate_TC() 	
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 if ((YTC(Yw1) = new YaoTC ())==NULL) Ycreate_errnew();}
}/*M1_TBTOG   */ 
void YtabTOgrad_degd(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_degd; ++Yws){
			 YG_degd(Yws, Yw1) = tab[Y3windice]; ++Y3windice;}}
}/*M1_GEQPD */ 
void YgradEQPdelta_degd(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_degd; ++Yws){
			 YG_degd(Yws, Yw1) = YD_degd(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPS */ 
void YdeltaEQPstate_degd(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_degd; ++Yws){
			 YD_degd(Yws, Yw1, Ywt) = YS_degd(Yws, Yw1) * pfact;}}}
}/*M1_DEQPG */ 
void YdeltaEQPgrad_degd(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_degd; ++Yws){
			 YD_degd(Yws, Yw1, Ywt) = YG_degd(Yws, Yw1) * pfact;}}}
}/*M1_SEQPD */ 
void YstateEQPdelta_degd(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_degd; ++Yws){
			 YS_degd(Yws, Yw1) = YD_degd(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPOD */ 
void YstateEQPOdelta_degd(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_degd; ++Yws){
			 YS_degd(Yws, Yw1) = YD_degd(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTD */ 
void YstateEQAPTdelta_degd(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_degd; ++Yws){
			 YS_degd(Yws, Yw1) = YD_degd(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQV */ 
void YgradEQval_degd(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_degd; ++Yws){
			 YG_degd(Yws, Yw1) = val;}}
}/*M1_GEQPS */ 
void YgradEQPstate_degd(double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_degd; ++Yws){
			 YG_degd(Yws, Yw1) = YS_degd(Yws, Yw1) * pfact;}}
}/*M1_GEQPOS */ 
void YgradEQPOstate_degd(double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_degd; ++Yws){
			 YG_degd(Yws, Yw1) = YS_degd(Yws, Yw1) * (pfact*(1+Ygetval(codop)));}}
}/*M1_STOTB   */ 
void YstateTOtab_degd(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_degd; ++Yws){
			 tab[Y3windice] = YS_degd(Yws, Yw1); ++Y3windice;}}
}/*M1_GTOTB   */ 
void YgradTOtab_degd(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_degd; ++Yws){
			 tab[Y3windice] = YG_degd(Yws, Yw1); ++Y3windice;}}
}/*M1_RGRAD*/ 
void Yrazgrad_degd()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_degd; ++Yws){
			 Ydegd(Yw1)->Ygrad[Yws] = 0.0;}}
}/*M1_SETA*/ 
void Ysetstate_degd(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_degd; ++Yws){
			 Ydegd(Yw1)->Ystate[Yws] = val;}}
}/*M1_YIOTU*/ 
void Yio_degd(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("degd", Yws, Yw1, Yw2, Yw3, Ywt, &YS_degd(Yws, Yw1), val);
}/*M1_CREY*/ 
void Ycreate_degd() 	
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 if ((Ydegd(Yw1) = new Yaodegd ())==NULL) Ycreate_errnew();}
}/*M1_TBTOG   */ 
void YtabTOgrad_HL1(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_HL1; ++Yws){
			 YG_HL1(Yws, Yw1) = tab[Y3windice]; ++Y3windice;}}
}/*M1_GEQPD */ 
void YgradEQPdelta_HL1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_HL1; ++Yws){
			 YG_HL1(Yws, Yw1) = YD_HL1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPS */ 
void YdeltaEQPstate_HL1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_HL1; ++Yws){
			 YD_HL1(Yws, Yw1, Ywt) = YS_HL1(Yws, Yw1) * pfact;}}}
}/*M1_DEQPG */ 
void YdeltaEQPgrad_HL1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_HL1; ++Yws){
			 YD_HL1(Yws, Yw1, Ywt) = YG_HL1(Yws, Yw1) * pfact;}}}
}/*M1_SEQPD */ 
void YstateEQPdelta_HL1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_HL1; ++Yws){
			 YS_HL1(Yws, Yw1) = YD_HL1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPOD */ 
void YstateEQPOdelta_HL1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_HL1; ++Yws){
			 YS_HL1(Yws, Yw1) = YD_HL1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTD */ 
void YstateEQAPTdelta_HL1(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_HL1; ++Yws){
			 YS_HL1(Yws, Yw1) = YD_HL1(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQV */ 
void YgradEQval_HL1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_HL1; ++Yws){
			 YG_HL1(Yws, Yw1) = val;}}
}/*M1_GEQPS */ 
void YgradEQPstate_HL1(double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_HL1; ++Yws){
			 YG_HL1(Yws, Yw1) = YS_HL1(Yws, Yw1) * pfact;}}
}/*M1_GEQPOS */ 
void YgradEQPOstate_HL1(double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_HL1; ++Yws){
			 YG_HL1(Yws, Yw1) = YS_HL1(Yws, Yw1) * (pfact*(1+Ygetval(codop)));}}
}/*M1_STOTB   */ 
void YstateTOtab_HL1(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_HL1; ++Yws){
			 tab[Y3windice] = YS_HL1(Yws, Yw1); ++Y3windice;}}
}/*M1_GTOTB   */ 
void YgradTOtab_HL1(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_HL1; ++Yws){
			 tab[Y3windice] = YG_HL1(Yws, Yw1); ++Y3windice;}}
}/*M1_RGRAD*/ 
void Yrazgrad_HL1()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_HL1; ++Yws){
			 YHL1(Yw1)->Ygrad[Yws] = 0.0;}}
}/*M1_SETA*/ 
void Ysetstate_HL1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_HL1; ++Yws){
			 YHL1(Yw1)->Ystate[Yws] = val;}}
}/*M1_YIOTU*/ 
void Yio_HL1(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("HL1", Yws, Yw1, Yw2, Yw3, Ywt, &YS_HL1(Yws, Yw1), val);
}/*M1_CREY*/ 
void Ycreate_HL1() 	
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 if ((YHL1(Yw1) = new YaoHL1 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOG   */ 
void YtabTOgrad_AUFT(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_AUFT; ++Yws){
			 YG_AUFT(Yws, Yw1) = tab[Y3windice]; ++Y3windice;}}
}/*M1_GEQPD */ 
void YgradEQPdelta_AUFT(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFT; ++Yws){
			 YG_AUFT(Yws, Yw1) = YD_AUFT(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPS */ 
void YdeltaEQPstate_AUFT(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFT; ++Yws){
			 YD_AUFT(Yws, Yw1, Ywt) = YS_AUFT(Yws, Yw1) * pfact;}}}
}/*M1_DEQPG */ 
void YdeltaEQPgrad_AUFT(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFT; ++Yws){
			 YD_AUFT(Yws, Yw1, Ywt) = YG_AUFT(Yws, Yw1) * pfact;}}}
}/*M1_SEQPD */ 
void YstateEQPdelta_AUFT(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFT; ++Yws){
			 YS_AUFT(Yws, Yw1) = YD_AUFT(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPOD */ 
void YstateEQPOdelta_AUFT(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFT; ++Yws){
			 YS_AUFT(Yws, Yw1) = YD_AUFT(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTD */ 
void YstateEQAPTdelta_AUFT(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFT; ++Yws){
			 YS_AUFT(Yws, Yw1) = YD_AUFT(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQV */ 
void YgradEQval_AUFT(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_AUFT; ++Yws){
			 YG_AUFT(Yws, Yw1) = val;}}
}/*M1_GEQPS */ 
void YgradEQPstate_AUFT(double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_AUFT; ++Yws){
			 YG_AUFT(Yws, Yw1) = YS_AUFT(Yws, Yw1) * pfact;}}
}/*M1_GEQPOS */ 
void YgradEQPOstate_AUFT(double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_AUFT; ++Yws){
			 YG_AUFT(Yws, Yw1) = YS_AUFT(Yws, Yw1) * (pfact*(1+Ygetval(codop)));}}
}/*M1_STOTB   */ 
void YstateTOtab_AUFT(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_AUFT; ++Yws){
			 tab[Y3windice] = YS_AUFT(Yws, Yw1); ++Y3windice;}}
}/*M1_GTOTB   */ 
void YgradTOtab_AUFT(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_AUFT; ++Yws){
			 tab[Y3windice] = YG_AUFT(Yws, Yw1); ++Y3windice;}}
}/*M1_RGRAD*/ 
void Yrazgrad_AUFT()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_AUFT; ++Yws){
			 YAUFT(Yw1)->Ygrad[Yws] = 0.0;}}
}/*M1_SETA*/ 
void Ysetstate_AUFT(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_AUFT; ++Yws){
			 YAUFT(Yw1)->Ystate[Yws] = val;}}
}/*M1_YIOTU*/ 
void Yio_AUFT(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("AUFT", Yws, Yw1, Yw2, Yw3, Ywt, &YS_AUFT(Yws, Yw1), val);
}/*M1_CREY*/ 
void Ycreate_AUFT() 	
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 if ((YAUFT(Yw1) = new YaoAUFT ())==NULL) Ycreate_errnew();}
}/*M1_ADJUS*/ 
void Yadjust_FC()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1) 
	 for (int Yws=0;Yws<YNBS_FC; ++Yws) 
	 { Ystate_FC(Yws, Yw1) -= Yepsi_FC(Yws, Yw1) * Ygrad_FC(Yws, Yw1); 
	}
}/*M1_ADJUD*/ 
void Yc_adjustd_FC()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1) 
	 for (int Yws=0;Yws<YNBS_FC; ++Yws) 
	 { Ydelta_FC(Yws, Yw1, 0) -= Yepsi_FC(Yws, Yw1) * Ygrad_FC(Yws, Yw1); 
	 }
}/*M1_ADJUK*/ 
void Yc_adjustk_FC()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1) 
	 for (int Yws=0;Yws<YNBS_FC; ++Yws) 
	 { Ystate_FC(Yws, Yw1) += Ydelta_FC(Yws, Yw1, 0); 
	 }
}/*M1_GCTOTB  */ 
void YgradCTOtab_FC(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 tab[Y3windice] += YG_FC(Yws, Yw1); ++Y3windice;}}
}/*M1_VSTA*/ 
void Y3valstate_FC()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 Y3x[Y3windice] = YFC(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_GSTA*/ 
void Y3getstate_FC(float x[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 YFC(Yw1)->Ystate[Yws] = x[Y3windice]; ++Y3windice;}}
}/*M1_VGRAD*/ 
void Y3valgrad_FC(float g[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 g[Y3windice] = YFC(Yw1)->Ygrad[Yws]; ++Y3windice;}}
}/*M1_VXINF*/ 
void Y3valxinf_FC()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 Y3xinf[Y3windice] = YFC(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_VXSUP*/ 
void Y3valxsup_FC()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 Y3xsup[Y3windice] = YFC(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_VDXMI*/ 
void Y3valdxmin_FC()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 Y3dxmin[Y3windice] = YFC(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_GDEL*/ 
void Y3getdelta_FC(float x[])
{
	 for (int Ywi=0; Ywi<YA1_Spar; ++Ywi){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 Ydelta_FC(Yws, Ywi, 0) = x[Y3windice]; ++Y3windice;}}
}/*M1_VDEL*/ 
void Y3valdelta_FC()
{
	 for (int Ywi=0; Ywi<YA1_Spar; ++Ywi){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 Y3x[Y3windice] = Ydelta_FC(Yws, Ywi, 0); ++Y3windice;}}
}/*M1_TBTOG   */ 
void YtabTOgrad_FC(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 YG_FC(Yws, Yw1) = tab[Y3windice]; ++Y3windice;}}
}/*M1_GEQPD */ 
void YgradEQPdelta_FC(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 YG_FC(Yws, Yw1) = YD_FC(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPS */ 
void YdeltaEQPstate_FC(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 YD_FC(Yws, Yw1, Ywt) = YS_FC(Yws, Yw1) * pfact;}}}
}/*M1_DEQPG */ 
void YdeltaEQPgrad_FC(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 YD_FC(Yws, Yw1, Ywt) = YG_FC(Yws, Yw1) * pfact;}}}
}/*M1_SEQPD */ 
void YstateEQPdelta_FC(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 YS_FC(Yws, Yw1) = YD_FC(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPOD */ 
void YstateEQPOdelta_FC(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 YS_FC(Yws, Yw1) = YD_FC(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTD */ 
void YstateEQAPTdelta_FC(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 YS_FC(Yws, Yw1) = YD_FC(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQV */ 
void YgradEQval_FC(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 YG_FC(Yws, Yw1) = val;}}
}/*M1_GEQPS */ 
void YgradEQPstate_FC(double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 YG_FC(Yws, Yw1) = YS_FC(Yws, Yw1) * pfact;}}
}/*M1_GEQPOS */ 
void YgradEQPOstate_FC(double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 YG_FC(Yws, Yw1) = YS_FC(Yws, Yw1) * (pfact*(1+Ygetval(codop)));}}
}/*M1_STOTB   */ 
void YstateTOtab_FC(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 tab[Y3windice] = YS_FC(Yws, Yw1); ++Y3windice;}}
}/*M1_GTOTB   */ 
void YgradTOtab_FC(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 tab[Y3windice] = YG_FC(Yws, Yw1); ++Y3windice;}}
}/*M1_RGRAD*/ 
void Yrazgrad_FC()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 YFC(Yw1)->Ygrad[Yws] = 0.0;}}
}/*M1_SETA*/ 
void Ysetstate_FC(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 YFC(Yw1)->Ystate[Yws] = val;}}
}/*M1_YIOTU*/ 
void Yio_FC(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("FC", Yws, Yw1, Yw2, Yw3, Ywt, &YS_FC(Yws, Yw1), val);
}/*M0_OUTOB*/ 
int Youtoobs_FC(YioKind yiokind, int Yws, int Ywt, int arbpdt)
{
	 Yaobs.time = arbpdt;
	 Yaobs.imod = Yimod("FC");
	 Yaobs.smod = Yws;/*M1_OUTOB*/ 
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1)
	 {	if(select_io(yiokind, "FC", Yws, Yw1, -1, -1, Ywt, &Ystate_FC(Yws, Yw1)))
			{	Yaobs.iaxe = Yw1; Yaobs.jaxe = -1; Yaobs.kaxe = -1;
				Yaobs.vobs = Ystate_FC(Yws, Yw1);
				if(!Yobs_insert (&Yaobs)) return(0);
			}
	 }/*M9_OUTOB*/  
	 return(1);
}/*M1_SEPS*/ 
void Ysetepsi_FC(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 YFC(Yw1)->Yepsi[Yws] = val;}}
}/*M1_CREY*/ 
void Ycreate_FC() 	
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 if ((YFC(Yw1) = new YaoFC ())==NULL) Ycreate_errnew();}
}/*M1_SWISH*/ 
void Ysetwish_FC(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_FC; ++Yws){
			 Ywish_FC(Yws, Yw1) = val;}}
}/*M1_TBTOG   */ 
void YtabTOgrad_BE(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_BE; ++Yws){
			 YG_BE(Yws, Yw1) = tab[Y3windice]; ++Y3windice;}}
}/*M1_GEQPD */ 
void YgradEQPdelta_BE(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_BE; ++Yws){
			 YG_BE(Yws, Yw1) = YD_BE(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPS */ 
void YdeltaEQPstate_BE(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_BE; ++Yws){
			 YD_BE(Yws, Yw1, Ywt) = YS_BE(Yws, Yw1) * pfact;}}}
}/*M1_DEQPG */ 
void YdeltaEQPgrad_BE(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_BE; ++Yws){
			 YD_BE(Yws, Yw1, Ywt) = YG_BE(Yws, Yw1) * pfact;}}}
}/*M1_SEQPD */ 
void YstateEQPdelta_BE(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_BE; ++Yws){
			 YS_BE(Yws, Yw1) = YD_BE(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPOD */ 
void YstateEQPOdelta_BE(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_BE; ++Yws){
			 YS_BE(Yws, Yw1) = YD_BE(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTD */ 
void YstateEQAPTdelta_BE(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_BE; ++Yws){
			 YS_BE(Yws, Yw1) = YD_BE(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQV */ 
void YgradEQval_BE(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_BE; ++Yws){
			 YG_BE(Yws, Yw1) = val;}}
}/*M1_GEQPS */ 
void YgradEQPstate_BE(double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_BE; ++Yws){
			 YG_BE(Yws, Yw1) = YS_BE(Yws, Yw1) * pfact;}}
}/*M1_GEQPOS */ 
void YgradEQPOstate_BE(double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_BE; ++Yws){
			 YG_BE(Yws, Yw1) = YS_BE(Yws, Yw1) * (pfact*(1+Ygetval(codop)));}}
}/*M1_STOTB   */ 
void YstateTOtab_BE(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_BE; ++Yws){
			 tab[Y3windice] = YS_BE(Yws, Yw1); ++Y3windice;}}
}/*M1_GTOTB   */ 
void YgradTOtab_BE(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_BE; ++Yws){
			 tab[Y3windice] = YG_BE(Yws, Yw1); ++Y3windice;}}
}/*M1_RGRAD*/ 
void Yrazgrad_BE()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_BE; ++Yws){
			 YBE(Yw1)->Ygrad[Yws] = 0.0;}}
}/*M1_SETA*/ 
void Ysetstate_BE(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_BE; ++Yws){
			 YBE(Yw1)->Ystate[Yws] = val;}}
}/*M1_YIOTU*/ 
void Yio_BE(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("BE", Yws, Yw1, Yw2, Yw3, Ywt, &YS_BE(Yws, Yw1), val);
}/*M1_CREY*/ 
void Ycreate_BE() 	
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 if ((YBE(Yw1) = new YaoBE ())==NULL) Ycreate_errnew();}
}/*M1_TBTOG   */ 
void YtabTOgrad_CEF(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_CEF; ++Yws){
			 YG_CEF(Yws, Yw1) = tab[Y3windice]; ++Y3windice;}}
}/*M1_GEQPD */ 
void YgradEQPdelta_CEF(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_CEF; ++Yws){
			 YG_CEF(Yws, Yw1) = YD_CEF(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPS */ 
void YdeltaEQPstate_CEF(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_CEF; ++Yws){
			 YD_CEF(Yws, Yw1, Ywt) = YS_CEF(Yws, Yw1) * pfact;}}}
}/*M1_DEQPG */ 
void YdeltaEQPgrad_CEF(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_CEF; ++Yws){
			 YD_CEF(Yws, Yw1, Ywt) = YG_CEF(Yws, Yw1) * pfact;}}}
}/*M1_SEQPD */ 
void YstateEQPdelta_CEF(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_CEF; ++Yws){
			 YS_CEF(Yws, Yw1) = YD_CEF(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPOD */ 
void YstateEQPOdelta_CEF(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_CEF; ++Yws){
			 YS_CEF(Yws, Yw1) = YD_CEF(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTD */ 
void YstateEQAPTdelta_CEF(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_CEF; ++Yws){
			 YS_CEF(Yws, Yw1) = YD_CEF(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQV */ 
void YgradEQval_CEF(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_CEF; ++Yws){
			 YG_CEF(Yws, Yw1) = val;}}
}/*M1_GEQPS */ 
void YgradEQPstate_CEF(double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_CEF; ++Yws){
			 YG_CEF(Yws, Yw1) = YS_CEF(Yws, Yw1) * pfact;}}
}/*M1_GEQPOS */ 
void YgradEQPOstate_CEF(double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_CEF; ++Yws){
			 YG_CEF(Yws, Yw1) = YS_CEF(Yws, Yw1) * (pfact*(1+Ygetval(codop)));}}
}/*M1_STOTB   */ 
void YstateTOtab_CEF(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_CEF; ++Yws){
			 tab[Y3windice] = YS_CEF(Yws, Yw1); ++Y3windice;}}
}/*M1_GTOTB   */ 
void YgradTOtab_CEF(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_CEF; ++Yws){
			 tab[Y3windice] = YG_CEF(Yws, Yw1); ++Y3windice;}}
}/*M1_RGRAD*/ 
void Yrazgrad_CEF()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_CEF; ++Yws){
			 YCEF(Yw1)->Ygrad[Yws] = 0.0;}}
}/*M1_SETA*/ 
void Ysetstate_CEF(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_CEF; ++Yws){
			 YCEF(Yw1)->Ystate[Yws] = val;}}
}/*M1_YIOTU*/ 
void Yio_CEF(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("CEF", Yws, Yw1, Yw2, Yw3, Ywt, &YS_CEF(Yws, Yw1), val);
}/*M1_CREY*/ 
void Ycreate_CEF() 	
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 if ((YCEF(Yw1) = new YaoCEF ())==NULL) Ycreate_errnew();}
}/*M1_TBTOG   */ 
void YtabTOgrad_PWP(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PWP; ++Yws){
			 YG_PWP(Yws, Yw1) = tab[Y3windice]; ++Y3windice;}}
}/*M1_GEQPD */ 
void YgradEQPdelta_PWP(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PWP; ++Yws){
			 YG_PWP(Yws, Yw1) = YD_PWP(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPS */ 
void YdeltaEQPstate_PWP(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PWP; ++Yws){
			 YD_PWP(Yws, Yw1, Ywt) = YS_PWP(Yws, Yw1) * pfact;}}}
}/*M1_DEQPG */ 
void YdeltaEQPgrad_PWP(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PWP; ++Yws){
			 YD_PWP(Yws, Yw1, Ywt) = YG_PWP(Yws, Yw1) * pfact;}}}
}/*M1_SEQPD */ 
void YstateEQPdelta_PWP(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PWP; ++Yws){
			 YS_PWP(Yws, Yw1) = YD_PWP(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPOD */ 
void YstateEQPOdelta_PWP(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PWP; ++Yws){
			 YS_PWP(Yws, Yw1) = YD_PWP(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTD */ 
void YstateEQAPTdelta_PWP(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PWP; ++Yws){
			 YS_PWP(Yws, Yw1) = YD_PWP(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQV */ 
void YgradEQval_PWP(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PWP; ++Yws){
			 YG_PWP(Yws, Yw1) = val;}}
}/*M1_GEQPS */ 
void YgradEQPstate_PWP(double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PWP; ++Yws){
			 YG_PWP(Yws, Yw1) = YS_PWP(Yws, Yw1) * pfact;}}
}/*M1_GEQPOS */ 
void YgradEQPOstate_PWP(double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PWP; ++Yws){
			 YG_PWP(Yws, Yw1) = YS_PWP(Yws, Yw1) * (pfact*(1+Ygetval(codop)));}}
}/*M1_STOTB   */ 
void YstateTOtab_PWP(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PWP; ++Yws){
			 tab[Y3windice] = YS_PWP(Yws, Yw1); ++Y3windice;}}
}/*M1_GTOTB   */ 
void YgradTOtab_PWP(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PWP; ++Yws){
			 tab[Y3windice] = YG_PWP(Yws, Yw1); ++Y3windice;}}
}/*M1_RGRAD*/ 
void Yrazgrad_PWP()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PWP; ++Yws){
			 YPWP(Yw1)->Ygrad[Yws] = 0.0;}}
}/*M1_SETA*/ 
void Ysetstate_PWP(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PWP; ++Yws){
			 YPWP(Yw1)->Ystate[Yws] = val;}}
}/*M1_YIOTU*/ 
void Yio_PWP(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("PWP", Yws, Yw1, Yw2, Yw3, Ywt, &YS_PWP(Yws, Yw1), val);
}/*M1_CREY*/ 
void Ycreate_PWP() 	
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 if ((YPWP(Yw1) = new YaoPWP ())==NULL) Ycreate_errnew();}
}/*M1_TBTOG   */ 
void YtabTOgrad_K1(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K1; ++Yws){
			 YG_K1(Yws, Yw1) = tab[Y3windice]; ++Y3windice;}}
}/*M1_GEQPD */ 
void YgradEQPdelta_K1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_K1; ++Yws){
			 YG_K1(Yws, Yw1) = YD_K1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPS */ 
void YdeltaEQPstate_K1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_K1; ++Yws){
			 YD_K1(Yws, Yw1, Ywt) = YS_K1(Yws, Yw1) * pfact;}}}
}/*M1_DEQPG */ 
void YdeltaEQPgrad_K1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_K1; ++Yws){
			 YD_K1(Yws, Yw1, Ywt) = YG_K1(Yws, Yw1) * pfact;}}}
}/*M1_SEQPD */ 
void YstateEQPdelta_K1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_K1; ++Yws){
			 YS_K1(Yws, Yw1) = YD_K1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPOD */ 
void YstateEQPOdelta_K1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_K1; ++Yws){
			 YS_K1(Yws, Yw1) = YD_K1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTD */ 
void YstateEQAPTdelta_K1(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_K1; ++Yws){
			 YS_K1(Yws, Yw1) = YD_K1(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQV */ 
void YgradEQval_K1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K1; ++Yws){
			 YG_K1(Yws, Yw1) = val;}}
}/*M1_GEQPS */ 
void YgradEQPstate_K1(double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K1; ++Yws){
			 YG_K1(Yws, Yw1) = YS_K1(Yws, Yw1) * pfact;}}
}/*M1_GEQPOS */ 
void YgradEQPOstate_K1(double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K1; ++Yws){
			 YG_K1(Yws, Yw1) = YS_K1(Yws, Yw1) * (pfact*(1+Ygetval(codop)));}}
}/*M1_STOTB   */ 
void YstateTOtab_K1(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K1; ++Yws){
			 tab[Y3windice] = YS_K1(Yws, Yw1); ++Y3windice;}}
}/*M1_GTOTB   */ 
void YgradTOtab_K1(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K1; ++Yws){
			 tab[Y3windice] = YG_K1(Yws, Yw1); ++Y3windice;}}
}/*M1_RGRAD*/ 
void Yrazgrad_K1()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K1; ++Yws){
			 YK1(Yw1)->Ygrad[Yws] = 0.0;}}
}/*M1_SETA*/ 
void Ysetstate_K1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K1; ++Yws){
			 YK1(Yw1)->Ystate[Yws] = val;}}
}/*M1_YIOTU*/ 
void Yio_K1(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("K1", Yws, Yw1, Yw2, Yw3, Ywt, &YS_K1(Yws, Yw1), val);
}/*M1_CREY*/ 
void Ycreate_K1() 	
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 if ((YK1(Yw1) = new YaoK1 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOG   */ 
void YtabTOgrad_K2(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K2; ++Yws){
			 YG_K2(Yws, Yw1) = tab[Y3windice]; ++Y3windice;}}
}/*M1_GEQPD */ 
void YgradEQPdelta_K2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_K2; ++Yws){
			 YG_K2(Yws, Yw1) = YD_K2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPS */ 
void YdeltaEQPstate_K2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_K2; ++Yws){
			 YD_K2(Yws, Yw1, Ywt) = YS_K2(Yws, Yw1) * pfact;}}}
}/*M1_DEQPG */ 
void YdeltaEQPgrad_K2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_K2; ++Yws){
			 YD_K2(Yws, Yw1, Ywt) = YG_K2(Yws, Yw1) * pfact;}}}
}/*M1_SEQPD */ 
void YstateEQPdelta_K2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_K2; ++Yws){
			 YS_K2(Yws, Yw1) = YD_K2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPOD */ 
void YstateEQPOdelta_K2(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_K2; ++Yws){
			 YS_K2(Yws, Yw1) = YD_K2(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTD */ 
void YstateEQAPTdelta_K2(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_K2; ++Yws){
			 YS_K2(Yws, Yw1) = YD_K2(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQV */ 
void YgradEQval_K2(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K2; ++Yws){
			 YG_K2(Yws, Yw1) = val;}}
}/*M1_GEQPS */ 
void YgradEQPstate_K2(double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K2; ++Yws){
			 YG_K2(Yws, Yw1) = YS_K2(Yws, Yw1) * pfact;}}
}/*M1_GEQPOS */ 
void YgradEQPOstate_K2(double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K2; ++Yws){
			 YG_K2(Yws, Yw1) = YS_K2(Yws, Yw1) * (pfact*(1+Ygetval(codop)));}}
}/*M1_STOTB   */ 
void YstateTOtab_K2(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K2; ++Yws){
			 tab[Y3windice] = YS_K2(Yws, Yw1); ++Y3windice;}}
}/*M1_GTOTB   */ 
void YgradTOtab_K2(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K2; ++Yws){
			 tab[Y3windice] = YG_K2(Yws, Yw1); ++Y3windice;}}
}/*M1_RGRAD*/ 
void Yrazgrad_K2()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K2; ++Yws){
			 YK2(Yw1)->Ygrad[Yws] = 0.0;}}
}/*M1_SETA*/ 
void Ysetstate_K2(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K2; ++Yws){
			 YK2(Yw1)->Ystate[Yws] = val;}}
}/*M1_YIOTU*/ 
void Yio_K2(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("K2", Yws, Yw1, Yw2, Yw3, Ywt, &YS_K2(Yws, Yw1), val);
}/*M1_CREY*/ 
void Ycreate_K2() 	
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 if ((YK2(Yw1) = new YaoK2 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOG   */ 
void YtabTOgrad_K3(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K3; ++Yws){
			 YG_K3(Yws, Yw1) = tab[Y3windice]; ++Y3windice;}}
}/*M1_GEQPD */ 
void YgradEQPdelta_K3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_K3; ++Yws){
			 YG_K3(Yws, Yw1) = YD_K3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPS */ 
void YdeltaEQPstate_K3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_K3; ++Yws){
			 YD_K3(Yws, Yw1, Ywt) = YS_K3(Yws, Yw1) * pfact;}}}
}/*M1_DEQPG */ 
void YdeltaEQPgrad_K3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_K3; ++Yws){
			 YD_K3(Yws, Yw1, Ywt) = YG_K3(Yws, Yw1) * pfact;}}}
}/*M1_SEQPD */ 
void YstateEQPdelta_K3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_K3; ++Yws){
			 YS_K3(Yws, Yw1) = YD_K3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPOD */ 
void YstateEQPOdelta_K3(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_K3; ++Yws){
			 YS_K3(Yws, Yw1) = YD_K3(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTD */ 
void YstateEQAPTdelta_K3(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_K3; ++Yws){
			 YS_K3(Yws, Yw1) = YD_K3(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQV */ 
void YgradEQval_K3(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K3; ++Yws){
			 YG_K3(Yws, Yw1) = val;}}
}/*M1_GEQPS */ 
void YgradEQPstate_K3(double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K3; ++Yws){
			 YG_K3(Yws, Yw1) = YS_K3(Yws, Yw1) * pfact;}}
}/*M1_GEQPOS */ 
void YgradEQPOstate_K3(double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K3; ++Yws){
			 YG_K3(Yws, Yw1) = YS_K3(Yws, Yw1) * (pfact*(1+Ygetval(codop)));}}
}/*M1_STOTB   */ 
void YstateTOtab_K3(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K3; ++Yws){
			 tab[Y3windice] = YS_K3(Yws, Yw1); ++Y3windice;}}
}/*M1_GTOTB   */ 
void YgradTOtab_K3(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K3; ++Yws){
			 tab[Y3windice] = YG_K3(Yws, Yw1); ++Y3windice;}}
}/*M1_RGRAD*/ 
void Yrazgrad_K3()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K3; ++Yws){
			 YK3(Yw1)->Ygrad[Yws] = 0.0;}}
}/*M1_SETA*/ 
void Ysetstate_K3(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_K3; ++Yws){
			 YK3(Yw1)->Ystate[Yws] = val;}}
}/*M1_YIOTU*/ 
void Yio_K3(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("K3", Yws, Yw1, Yw2, Yw3, Ywt, &YS_K3(Yws, Yw1), val);
}/*M1_CREY*/ 
void Ycreate_K3() 	
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 if ((YK3(Yw1) = new YaoK3 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOG   */ 
void YtabTOgrad_ALPHA(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_ALPHA; ++Yws){
			 YG_ALPHA(Yws, Yw1) = tab[Y3windice]; ++Y3windice;}}
}/*M1_GEQPD */ 
void YgradEQPdelta_ALPHA(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ALPHA; ++Yws){
			 YG_ALPHA(Yws, Yw1) = YD_ALPHA(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPS */ 
void YdeltaEQPstate_ALPHA(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ALPHA; ++Yws){
			 YD_ALPHA(Yws, Yw1, Ywt) = YS_ALPHA(Yws, Yw1) * pfact;}}}
}/*M1_DEQPG */ 
void YdeltaEQPgrad_ALPHA(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ALPHA; ++Yws){
			 YD_ALPHA(Yws, Yw1, Ywt) = YG_ALPHA(Yws, Yw1) * pfact;}}}
}/*M1_SEQPD */ 
void YstateEQPdelta_ALPHA(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ALPHA; ++Yws){
			 YS_ALPHA(Yws, Yw1) = YD_ALPHA(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPOD */ 
void YstateEQPOdelta_ALPHA(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ALPHA; ++Yws){
			 YS_ALPHA(Yws, Yw1) = YD_ALPHA(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTD */ 
void YstateEQAPTdelta_ALPHA(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ALPHA; ++Yws){
			 YS_ALPHA(Yws, Yw1) = YD_ALPHA(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQV */ 
void YgradEQval_ALPHA(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_ALPHA; ++Yws){
			 YG_ALPHA(Yws, Yw1) = val;}}
}/*M1_GEQPS */ 
void YgradEQPstate_ALPHA(double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_ALPHA; ++Yws){
			 YG_ALPHA(Yws, Yw1) = YS_ALPHA(Yws, Yw1) * pfact;}}
}/*M1_GEQPOS */ 
void YgradEQPOstate_ALPHA(double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_ALPHA; ++Yws){
			 YG_ALPHA(Yws, Yw1) = YS_ALPHA(Yws, Yw1) * (pfact*(1+Ygetval(codop)));}}
}/*M1_STOTB   */ 
void YstateTOtab_ALPHA(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_ALPHA; ++Yws){
			 tab[Y3windice] = YS_ALPHA(Yws, Yw1); ++Y3windice;}}
}/*M1_GTOTB   */ 
void YgradTOtab_ALPHA(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_ALPHA; ++Yws){
			 tab[Y3windice] = YG_ALPHA(Yws, Yw1); ++Y3windice;}}
}/*M1_RGRAD*/ 
void Yrazgrad_ALPHA()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_ALPHA; ++Yws){
			 YALPHA(Yw1)->Ygrad[Yws] = 0.0;}}
}/*M1_SETA*/ 
void Ysetstate_ALPHA(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_ALPHA; ++Yws){
			 YALPHA(Yw1)->Ystate[Yws] = val;}}
}/*M1_YIOTU*/ 
void Yio_ALPHA(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("ALPHA", Yws, Yw1, Yw2, Yw3, Ywt, &YS_ALPHA(Yws, Yw1), val);
}/*M1_CREY*/ 
void Ycreate_ALPHA() 	
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 if ((YALPHA(Yw1) = new YaoALPHA ())==NULL) Ycreate_errnew();}
}/*M1_TBTOG   */ 
void YtabTOgrad_PER1(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PER1; ++Yws){
			 YG_PER1(Yws, Yw1) = tab[Y3windice]; ++Y3windice;}}
}/*M1_GEQPD */ 
void YgradEQPdelta_PER1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PER1; ++Yws){
			 YG_PER1(Yws, Yw1) = YD_PER1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPS */ 
void YdeltaEQPstate_PER1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PER1; ++Yws){
			 YD_PER1(Yws, Yw1, Ywt) = YS_PER1(Yws, Yw1) * pfact;}}}
}/*M1_DEQPG */ 
void YdeltaEQPgrad_PER1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PER1; ++Yws){
			 YD_PER1(Yws, Yw1, Ywt) = YG_PER1(Yws, Yw1) * pfact;}}}
}/*M1_SEQPD */ 
void YstateEQPdelta_PER1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PER1; ++Yws){
			 YS_PER1(Yws, Yw1) = YD_PER1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPOD */ 
void YstateEQPOdelta_PER1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PER1; ++Yws){
			 YS_PER1(Yws, Yw1) = YD_PER1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTD */ 
void YstateEQAPTdelta_PER1(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PER1; ++Yws){
			 YS_PER1(Yws, Yw1) = YD_PER1(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQV */ 
void YgradEQval_PER1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PER1; ++Yws){
			 YG_PER1(Yws, Yw1) = val;}}
}/*M1_GEQPS */ 
void YgradEQPstate_PER1(double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PER1; ++Yws){
			 YG_PER1(Yws, Yw1) = YS_PER1(Yws, Yw1) * pfact;}}
}/*M1_GEQPOS */ 
void YgradEQPOstate_PER1(double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PER1; ++Yws){
			 YG_PER1(Yws, Yw1) = YS_PER1(Yws, Yw1) * (pfact*(1+Ygetval(codop)));}}
}/*M1_STOTB   */ 
void YstateTOtab_PER1(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PER1; ++Yws){
			 tab[Y3windice] = YS_PER1(Yws, Yw1); ++Y3windice;}}
}/*M1_GTOTB   */ 
void YgradTOtab_PER1(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PER1; ++Yws){
			 tab[Y3windice] = YG_PER1(Yws, Yw1); ++Y3windice;}}
}/*M1_RGRAD*/ 
void Yrazgrad_PER1()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PER1; ++Yws){
			 YPER1(Yw1)->Ygrad[Yws] = 0.0;}}
}/*M1_SETA*/ 
void Ysetstate_PER1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PER1; ++Yws){
			 YPER1(Yw1)->Ystate[Yws] = val;}}
}/*M1_YIOTU*/ 
void Yio_PER1(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("PER1", Yws, Yw1, Yw2, Yw3, Ywt, &YS_PER1(Yws, Yw1), val);
}/*M1_CREY*/ 
void Ycreate_PER1() 	
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 if ((YPER1(Yw1) = new YaoPER1 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOG   */ 
void YtabTOgrad_PER2(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PER2; ++Yws){
			 YG_PER2(Yws, Yw1) = tab[Y3windice]; ++Y3windice;}}
}/*M1_GEQPD */ 
void YgradEQPdelta_PER2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PER2; ++Yws){
			 YG_PER2(Yws, Yw1) = YD_PER2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPS */ 
void YdeltaEQPstate_PER2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PER2; ++Yws){
			 YD_PER2(Yws, Yw1, Ywt) = YS_PER2(Yws, Yw1) * pfact;}}}
}/*M1_DEQPG */ 
void YdeltaEQPgrad_PER2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PER2; ++Yws){
			 YD_PER2(Yws, Yw1, Ywt) = YG_PER2(Yws, Yw1) * pfact;}}}
}/*M1_SEQPD */ 
void YstateEQPdelta_PER2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PER2; ++Yws){
			 YS_PER2(Yws, Yw1) = YD_PER2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPOD */ 
void YstateEQPOdelta_PER2(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PER2; ++Yws){
			 YS_PER2(Yws, Yw1) = YD_PER2(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTD */ 
void YstateEQAPTdelta_PER2(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PER2; ++Yws){
			 YS_PER2(Yws, Yw1) = YD_PER2(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQV */ 
void YgradEQval_PER2(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PER2; ++Yws){
			 YG_PER2(Yws, Yw1) = val;}}
}/*M1_GEQPS */ 
void YgradEQPstate_PER2(double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PER2; ++Yws){
			 YG_PER2(Yws, Yw1) = YS_PER2(Yws, Yw1) * pfact;}}
}/*M1_GEQPOS */ 
void YgradEQPOstate_PER2(double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PER2; ++Yws){
			 YG_PER2(Yws, Yw1) = YS_PER2(Yws, Yw1) * (pfact*(1+Ygetval(codop)));}}
}/*M1_STOTB   */ 
void YstateTOtab_PER2(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PER2; ++Yws){
			 tab[Y3windice] = YS_PER2(Yws, Yw1); ++Y3windice;}}
}/*M1_GTOTB   */ 
void YgradTOtab_PER2(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PER2; ++Yws){
			 tab[Y3windice] = YG_PER2(Yws, Yw1); ++Y3windice;}}
}/*M1_RGRAD*/ 
void Yrazgrad_PER2()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PER2; ++Yws){
			 YPER2(Yw1)->Ygrad[Yws] = 0.0;}}
}/*M1_SETA*/ 
void Ysetstate_PER2(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_PER2; ++Yws){
			 YPER2(Yw1)->Ystate[Yws] = val;}}
}/*M1_YIOTU*/ 
void Yio_PER2(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("PER2", Yws, Yw1, Yw2, Yw3, Ywt, &YS_PER2(Yws, Yw1), val);
}/*M1_CREY*/ 
void Ycreate_PER2() 	
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 if ((YPER2(Yw1) = new YaoPER2 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_PE(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PE; ++Yws){
				 YG_PE(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_PE(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PE; ++Yws){
				 YG_PE(Yws, Yw1, Ywt) = YD_PE(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_PE(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PE; ++Yws){
				 YD_PE(Yws, Yw1, Ywt) = YS_PE(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_PE(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PE; ++Yws){
				 YD_PE(Yws, Yw1, Ywt) = YG_PE(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_PE(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PE; ++Yws){
				 YS_PE(Yws, Yw1, Ywt) = YD_PE(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_PE(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PE; ++Yws){
				 YS_PE(Yws, Yw1, Ywt) = YD_PE(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_PE(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PE; ++Yws){
				 YS_PE(Yws, Yw1, Ywt) = YD_PE(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_PE(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PE; ++Yws){
				 YG_PE(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_PE(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PE; ++Yws){
				 YG_PE(Yws, Yw1, Ywt) = YS_PE(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_PE(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PE; ++Yws){
				 YG_PE(Yws, Yw1, Ywt) = YS_PE(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_PE(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PE; ++Yws){
				 tab[Y3windice] = YS_PE(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_PE(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PE; ++Yws){
				 tab[Y3windice] = YG_PE(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_PE()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_PE; ++Yws){
				 YPE(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_PE(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PE; ++Yws){
				 YPE(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_PE(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("PE", Yws, Yw1, Yw2, Yw3, Ywt, &YS_PE(Yws, Yw1, Ywt), val);
}/*M1_CREY*/ 
void Ycreate_PE() 	
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YPE(Yw1) = new YaoPE ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_TT(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TT; ++Yws){
				 YG_TT(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_TT(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TT; ++Yws){
				 YG_TT(Yws, Yw1, Ywt) = YD_TT(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_TT(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TT; ++Yws){
				 YD_TT(Yws, Yw1, Ywt) = YS_TT(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_TT(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TT; ++Yws){
				 YD_TT(Yws, Yw1, Ywt) = YG_TT(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_TT(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TT; ++Yws){
				 YS_TT(Yws, Yw1, Ywt) = YD_TT(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_TT(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TT; ++Yws){
				 YS_TT(Yws, Yw1, Ywt) = YD_TT(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_TT(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TT; ++Yws){
				 YS_TT(Yws, Yw1, Ywt) = YD_TT(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_TT(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TT; ++Yws){
				 YG_TT(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_TT(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TT; ++Yws){
				 YG_TT(Yws, Yw1, Ywt) = YS_TT(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_TT(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TT; ++Yws){
				 YG_TT(Yws, Yw1, Ywt) = YS_TT(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_TT(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TT; ++Yws){
				 tab[Y3windice] = YS_TT(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_TT(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TT; ++Yws){
				 tab[Y3windice] = YG_TT(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_TT()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_TT; ++Yws){
				 YTT(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_TT(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TT; ++Yws){
				 YTT(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_TT(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("TT", Yws, Yw1, Yw2, Yw3, Ywt, &YS_TT(Yws, Yw1, Ywt), val);
}/*M1_CREY*/ 
void Ycreate_TT() 	
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YTT(Yw1) = new YaoTT ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_TM(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TM; ++Yws){
				 YG_TM(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_TM(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TM; ++Yws){
				 YG_TM(Yws, Yw1, Ywt) = YD_TM(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_TM(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TM; ++Yws){
				 YD_TM(Yws, Yw1, Ywt) = YS_TM(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_TM(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TM; ++Yws){
				 YD_TM(Yws, Yw1, Ywt) = YG_TM(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_TM(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TM; ++Yws){
				 YS_TM(Yws, Yw1, Ywt) = YD_TM(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_TM(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TM; ++Yws){
				 YS_TM(Yws, Yw1, Ywt) = YD_TM(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_TM(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TM; ++Yws){
				 YS_TM(Yws, Yw1, Ywt) = YD_TM(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_TM(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TM; ++Yws){
				 YG_TM(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_TM(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TM; ++Yws){
				 YG_TM(Yws, Yw1, Ywt) = YS_TM(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_TM(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TM; ++Yws){
				 YG_TM(Yws, Yw1, Ywt) = YS_TM(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_TM(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TM; ++Yws){
				 tab[Y3windice] = YS_TM(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_TM(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TM; ++Yws){
				 tab[Y3windice] = YG_TM(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_TM()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_TM; ++Yws){
				 YTM(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_TM(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_TM; ++Yws){
				 YTM(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_TM(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("TM", Yws, Yw1, Yw2, Yw3, Ywt, &YS_TM(Yws, Yw1, Ywt), val);
}/*M1_CREY*/ 
void Ycreate_TM() 	
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YTM(Yw1) = new YaoTM ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_ETPM(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETPM; ++Yws){
				 YG_ETPM(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_ETPM(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETPM; ++Yws){
				 YG_ETPM(Yws, Yw1, Ywt) = YD_ETPM(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_ETPM(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETPM; ++Yws){
				 YD_ETPM(Yws, Yw1, Ywt) = YS_ETPM(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_ETPM(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETPM; ++Yws){
				 YD_ETPM(Yws, Yw1, Ywt) = YG_ETPM(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_ETPM(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETPM; ++Yws){
				 YS_ETPM(Yws, Yw1, Ywt) = YD_ETPM(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_ETPM(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETPM; ++Yws){
				 YS_ETPM(Yws, Yw1, Ywt) = YD_ETPM(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_ETPM(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETPM; ++Yws){
				 YS_ETPM(Yws, Yw1, Ywt) = YD_ETPM(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_ETPM(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETPM; ++Yws){
				 YG_ETPM(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_ETPM(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETPM; ++Yws){
				 YG_ETPM(Yws, Yw1, Ywt) = YS_ETPM(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_ETPM(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETPM; ++Yws){
				 YG_ETPM(Yws, Yw1, Ywt) = YS_ETPM(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_ETPM(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETPM; ++Yws){
				 tab[Y3windice] = YS_ETPM(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_ETPM(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETPM; ++Yws){
				 tab[Y3windice] = YG_ETPM(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_ETPM()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETPM; ++Yws){
				 YETPM(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_ETPM(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETPM; ++Yws){
				 YETPM(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_ETPM(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("ETPM", Yws, Yw1, Yw2, Yw3, Ywt, &YS_ETPM(Yws, Yw1, Ywt), val);
}/*M1_CREY*/ 
void Ycreate_ETPM() 	
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YETPM(Yw1) = new YaoETPM ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_Snow(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Snow; ++Yws){
				 YG_Snow(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_Snow(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Snow; ++Yws){
				 YG_Snow(Yws, Yw1, Ywt) = YD_Snow(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_Snow(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Snow; ++Yws){
				 YD_Snow(Yws, Yw1, Ywt) = YS_Snow(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_Snow(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Snow; ++Yws){
				 YD_Snow(Yws, Yw1, Ywt) = YG_Snow(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_Snow(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Snow; ++Yws){
				 YS_Snow(Yws, Yw1, Ywt) = YD_Snow(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_Snow(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Snow; ++Yws){
				 YS_Snow(Yws, Yw1, Ywt) = YD_Snow(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_Snow(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Snow; ++Yws){
				 YS_Snow(Yws, Yw1, Ywt) = YD_Snow(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_Snow(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Snow; ++Yws){
				 YG_Snow(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_Snow(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Snow; ++Yws){
				 YG_Snow(Yws, Yw1, Ywt) = YS_Snow(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_Snow(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Snow; ++Yws){
				 YG_Snow(Yws, Yw1, Ywt) = YS_Snow(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_Snow(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Snow; ++Yws){
				 tab[Y3windice] = YS_Snow(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_Snow(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Snow; ++Yws){
				 tab[Y3windice] = YG_Snow(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_Snow()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_Snow; ++Yws){
				 YSnow(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_Snow(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Snow; ++Yws){
				 YSnow(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_Snow(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("Snow", Yws, Yw1, Yw2, Yw3, Ywt, &YS_Snow(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_Snow (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], Snow *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_Snow)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_Snow()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YSnow(Yw1) = new Snow ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_AUFTHL11(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL11; ++Yws){
				 YG_AUFTHL11(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_AUFTHL11(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL11; ++Yws){
				 YG_AUFTHL11(Yws, Yw1, Ywt) = YD_AUFTHL11(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_AUFTHL11(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL11; ++Yws){
				 YD_AUFTHL11(Yws, Yw1, Ywt) = YS_AUFTHL11(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_AUFTHL11(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL11; ++Yws){
				 YD_AUFTHL11(Yws, Yw1, Ywt) = YG_AUFTHL11(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_AUFTHL11(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL11; ++Yws){
				 YS_AUFTHL11(Yws, Yw1, Ywt) = YD_AUFTHL11(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_AUFTHL11(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL11; ++Yws){
				 YS_AUFTHL11(Yws, Yw1, Ywt) = YD_AUFTHL11(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_AUFTHL11(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL11; ++Yws){
				 YS_AUFTHL11(Yws, Yw1, Ywt) = YD_AUFTHL11(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_AUFTHL11(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL11; ++Yws){
				 YG_AUFTHL11(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_AUFTHL11(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL11; ++Yws){
				 YG_AUFTHL11(Yws, Yw1, Ywt) = YS_AUFTHL11(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_AUFTHL11(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL11; ++Yws){
				 YG_AUFTHL11(Yws, Yw1, Ywt) = YS_AUFTHL11(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_AUFTHL11(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL11; ++Yws){
				 tab[Y3windice] = YS_AUFTHL11(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_AUFTHL11(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL11; ++Yws){
				 tab[Y3windice] = YG_AUFTHL11(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_AUFTHL11()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL11; ++Yws){
				 YAUFTHL11(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_AUFTHL11(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL11; ++Yws){
				 YAUFTHL11(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_AUFTHL11(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("AUFTHL11", Yws, Yw1, Yw2, Yw3, Ywt, &YS_AUFTHL11(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_AUFTHL11 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], AUFTHL11 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_AUFTHL11)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_AUFTHL11()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YAUFTHL11(Yw1) = new AUFTHL11 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_AUFTHL12(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL12; ++Yws){
				 YG_AUFTHL12(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_AUFTHL12(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL12; ++Yws){
				 YG_AUFTHL12(Yws, Yw1, Ywt) = YD_AUFTHL12(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_AUFTHL12(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL12; ++Yws){
				 YD_AUFTHL12(Yws, Yw1, Ywt) = YS_AUFTHL12(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_AUFTHL12(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL12; ++Yws){
				 YD_AUFTHL12(Yws, Yw1, Ywt) = YG_AUFTHL12(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_AUFTHL12(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL12; ++Yws){
				 YS_AUFTHL12(Yws, Yw1, Ywt) = YD_AUFTHL12(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_AUFTHL12(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL12; ++Yws){
				 YS_AUFTHL12(Yws, Yw1, Ywt) = YD_AUFTHL12(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_AUFTHL12(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL12; ++Yws){
				 YS_AUFTHL12(Yws, Yw1, Ywt) = YD_AUFTHL12(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_AUFTHL12(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL12; ++Yws){
				 YG_AUFTHL12(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_AUFTHL12(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL12; ++Yws){
				 YG_AUFTHL12(Yws, Yw1, Ywt) = YS_AUFTHL12(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_AUFTHL12(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL12; ++Yws){
				 YG_AUFTHL12(Yws, Yw1, Ywt) = YS_AUFTHL12(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_AUFTHL12(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL12; ++Yws){
				 tab[Y3windice] = YS_AUFTHL12(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_AUFTHL12(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL12; ++Yws){
				 tab[Y3windice] = YG_AUFTHL12(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_AUFTHL12()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL12; ++Yws){
				 YAUFTHL12(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_AUFTHL12(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_AUFTHL12; ++Yws){
				 YAUFTHL12(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_AUFTHL12(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("AUFTHL12", Yws, Yw1, Yw2, Yw3, Ywt, &YS_AUFTHL12(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_AUFTHL12 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], AUFTHL12 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_AUFTHL12)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_AUFTHL12()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YAUFTHL12(Yw1) = new AUFTHL12 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_Soil1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil1; ++Yws){
				 YG_Soil1(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_Soil1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil1; ++Yws){
				 YG_Soil1(Yws, Yw1, Ywt) = YD_Soil1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_Soil1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil1; ++Yws){
				 YD_Soil1(Yws, Yw1, Ywt) = YS_Soil1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_Soil1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil1; ++Yws){
				 YD_Soil1(Yws, Yw1, Ywt) = YG_Soil1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_Soil1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil1; ++Yws){
				 YS_Soil1(Yws, Yw1, Ywt) = YD_Soil1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_Soil1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil1; ++Yws){
				 YS_Soil1(Yws, Yw1, Ywt) = YD_Soil1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_Soil1(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil1; ++Yws){
				 YS_Soil1(Yws, Yw1, Ywt) = YD_Soil1(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_Soil1(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil1; ++Yws){
				 YG_Soil1(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_Soil1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil1; ++Yws){
				 YG_Soil1(Yws, Yw1, Ywt) = YS_Soil1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_Soil1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil1; ++Yws){
				 YG_Soil1(Yws, Yw1, Ywt) = YS_Soil1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_Soil1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil1; ++Yws){
				 tab[Y3windice] = YS_Soil1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_Soil1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil1; ++Yws){
				 tab[Y3windice] = YG_Soil1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_Soil1()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil1; ++Yws){
				 YSoil1(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_Soil1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil1; ++Yws){
				 YSoil1(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_Soil1(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("Soil1", Yws, Yw1, Yw2, Yw3, Ywt, &YS_Soil1(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_Soil1 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], Soil1 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_Soil1)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_Soil1()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YSoil1(Yw1) = new Soil1 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_Soil2(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil2; ++Yws){
				 YG_Soil2(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_Soil2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil2; ++Yws){
				 YG_Soil2(Yws, Yw1, Ywt) = YD_Soil2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_Soil2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil2; ++Yws){
				 YD_Soil2(Yws, Yw1, Ywt) = YS_Soil2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_Soil2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil2; ++Yws){
				 YD_Soil2(Yws, Yw1, Ywt) = YG_Soil2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_Soil2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil2; ++Yws){
				 YS_Soil2(Yws, Yw1, Ywt) = YD_Soil2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_Soil2(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil2; ++Yws){
				 YS_Soil2(Yws, Yw1, Ywt) = YD_Soil2(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_Soil2(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil2; ++Yws){
				 YS_Soil2(Yws, Yw1, Ywt) = YD_Soil2(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_Soil2(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil2; ++Yws){
				 YG_Soil2(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_Soil2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil2; ++Yws){
				 YG_Soil2(Yws, Yw1, Ywt) = YS_Soil2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_Soil2(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil2; ++Yws){
				 YG_Soil2(Yws, Yw1, Ywt) = YS_Soil2(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_Soil2(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil2; ++Yws){
				 tab[Y3windice] = YS_Soil2(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_Soil2(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil2; ++Yws){
				 tab[Y3windice] = YG_Soil2(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_Soil2()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil2; ++Yws){
				 YSoil2(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_Soil2(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil2; ++Yws){
				 YSoil2(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_Soil2(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("Soil2", Yws, Yw1, Yw2, Yw3, Ywt, &YS_Soil2(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_Soil2 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], Soil2 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_Soil2)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_Soil2()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YSoil2(Yw1) = new Soil2 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_Soil3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil3; ++Yws){
				 YG_Soil3(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_Soil3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil3; ++Yws){
				 YG_Soil3(Yws, Yw1, Ywt) = YD_Soil3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_Soil3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil3; ++Yws){
				 YD_Soil3(Yws, Yw1, Ywt) = YS_Soil3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_Soil3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil3; ++Yws){
				 YD_Soil3(Yws, Yw1, Ywt) = YG_Soil3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_Soil3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil3; ++Yws){
				 YS_Soil3(Yws, Yw1, Ywt) = YD_Soil3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_Soil3(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil3; ++Yws){
				 YS_Soil3(Yws, Yw1, Ywt) = YD_Soil3(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_Soil3(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil3; ++Yws){
				 YS_Soil3(Yws, Yw1, Ywt) = YD_Soil3(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_Soil3(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil3; ++Yws){
				 YG_Soil3(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_Soil3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil3; ++Yws){
				 YG_Soil3(Yws, Yw1, Ywt) = YS_Soil3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_Soil3(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil3; ++Yws){
				 YG_Soil3(Yws, Yw1, Ywt) = YS_Soil3(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_Soil3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil3; ++Yws){
				 tab[Y3windice] = YS_Soil3(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_Soil3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil3; ++Yws){
				 tab[Y3windice] = YG_Soil3(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_Soil3()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil3; ++Yws){
				 YSoil3(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_Soil3(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil3; ++Yws){
				 YSoil3(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_Soil3(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("Soil3", Yws, Yw1, Yw2, Yw3, Ywt, &YS_Soil3(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_Soil3 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], Soil3 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_Soil3)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_Soil3()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YSoil3(Yw1) = new Soil3 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_Soil4(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil4; ++Yws){
				 YG_Soil4(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_Soil4(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil4; ++Yws){
				 YG_Soil4(Yws, Yw1, Ywt) = YD_Soil4(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_Soil4(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil4; ++Yws){
				 YD_Soil4(Yws, Yw1, Ywt) = YS_Soil4(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_Soil4(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil4; ++Yws){
				 YD_Soil4(Yws, Yw1, Ywt) = YG_Soil4(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_Soil4(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil4; ++Yws){
				 YS_Soil4(Yws, Yw1, Ywt) = YD_Soil4(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_Soil4(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil4; ++Yws){
				 YS_Soil4(Yws, Yw1, Ywt) = YD_Soil4(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_Soil4(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil4; ++Yws){
				 YS_Soil4(Yws, Yw1, Ywt) = YD_Soil4(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_Soil4(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil4; ++Yws){
				 YG_Soil4(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_Soil4(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil4; ++Yws){
				 YG_Soil4(Yws, Yw1, Ywt) = YS_Soil4(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_Soil4(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil4; ++Yws){
				 YG_Soil4(Yws, Yw1, Ywt) = YS_Soil4(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_Soil4(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil4; ++Yws){
				 tab[Y3windice] = YS_Soil4(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_Soil4(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil4; ++Yws){
				 tab[Y3windice] = YG_Soil4(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_Soil4()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil4; ++Yws){
				 YSoil4(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_Soil4(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Soil4; ++Yws){
				 YSoil4(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_Soil4(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("Soil4", Yws, Yw1, Yw2, Yw3, Ywt, &YS_Soil4(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_Soil4 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], Soil4 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_Soil4)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_Soil4()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YSoil4(Yw1) = new Soil4 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_ETP(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETP; ++Yws){
				 YG_ETP(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_ETP(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETP; ++Yws){
				 YG_ETP(Yws, Yw1, Ywt) = YD_ETP(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_ETP(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETP; ++Yws){
				 YD_ETP(Yws, Yw1, Ywt) = YS_ETP(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_ETP(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETP; ++Yws){
				 YD_ETP(Yws, Yw1, Ywt) = YG_ETP(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_ETP(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETP; ++Yws){
				 YS_ETP(Yws, Yw1, Ywt) = YD_ETP(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_ETP(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETP; ++Yws){
				 YS_ETP(Yws, Yw1, Ywt) = YD_ETP(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_ETP(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETP; ++Yws){
				 YS_ETP(Yws, Yw1, Ywt) = YD_ETP(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_ETP(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETP; ++Yws){
				 YG_ETP(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_ETP(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETP; ++Yws){
				 YG_ETP(Yws, Yw1, Ywt) = YS_ETP(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_ETP(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETP; ++Yws){
				 YG_ETP(Yws, Yw1, Ywt) = YS_ETP(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_ETP(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETP; ++Yws){
				 tab[Y3windice] = YS_ETP(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_ETP(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETP; ++Yws){
				 tab[Y3windice] = YG_ETP(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_ETP()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETP; ++Yws){
				 YETP(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_ETP(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETP; ++Yws){
				 YETP(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_ETP(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("ETP", Yws, Yw1, Yw2, Yw3, Ywt, &YS_ETP(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_ETP (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], ETP *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_ETP)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_ETP()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YETP(Yw1) = new ETP ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_ETR1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR1; ++Yws){
				 YG_ETR1(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_ETR1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR1; ++Yws){
				 YG_ETR1(Yws, Yw1, Ywt) = YD_ETR1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_ETR1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR1; ++Yws){
				 YD_ETR1(Yws, Yw1, Ywt) = YS_ETR1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_ETR1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR1; ++Yws){
				 YD_ETR1(Yws, Yw1, Ywt) = YG_ETR1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_ETR1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR1; ++Yws){
				 YS_ETR1(Yws, Yw1, Ywt) = YD_ETR1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_ETR1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR1; ++Yws){
				 YS_ETR1(Yws, Yw1, Ywt) = YD_ETR1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_ETR1(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR1; ++Yws){
				 YS_ETR1(Yws, Yw1, Ywt) = YD_ETR1(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_ETR1(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR1; ++Yws){
				 YG_ETR1(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_ETR1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR1; ++Yws){
				 YG_ETR1(Yws, Yw1, Ywt) = YS_ETR1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_ETR1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR1; ++Yws){
				 YG_ETR1(Yws, Yw1, Ywt) = YS_ETR1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_ETR1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR1; ++Yws){
				 tab[Y3windice] = YS_ETR1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_ETR1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR1; ++Yws){
				 tab[Y3windice] = YG_ETR1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_ETR1()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR1; ++Yws){
				 YETR1(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_ETR1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR1; ++Yws){
				 YETR1(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_ETR1(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("ETR1", Yws, Yw1, Yw2, Yw3, Ywt, &YS_ETR1(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_ETR1 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], ETR1 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_ETR1)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_ETR1()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YETR1(Yw1) = new ETR1 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_ETR2(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR2; ++Yws){
				 YG_ETR2(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_ETR2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR2; ++Yws){
				 YG_ETR2(Yws, Yw1, Ywt) = YD_ETR2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_ETR2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR2; ++Yws){
				 YD_ETR2(Yws, Yw1, Ywt) = YS_ETR2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_ETR2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR2; ++Yws){
				 YD_ETR2(Yws, Yw1, Ywt) = YG_ETR2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_ETR2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR2; ++Yws){
				 YS_ETR2(Yws, Yw1, Ywt) = YD_ETR2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_ETR2(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR2; ++Yws){
				 YS_ETR2(Yws, Yw1, Ywt) = YD_ETR2(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_ETR2(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR2; ++Yws){
				 YS_ETR2(Yws, Yw1, Ywt) = YD_ETR2(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_ETR2(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR2; ++Yws){
				 YG_ETR2(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_ETR2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR2; ++Yws){
				 YG_ETR2(Yws, Yw1, Ywt) = YS_ETR2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_ETR2(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR2; ++Yws){
				 YG_ETR2(Yws, Yw1, Ywt) = YS_ETR2(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_ETR2(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR2; ++Yws){
				 tab[Y3windice] = YS_ETR2(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_ETR2(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR2; ++Yws){
				 tab[Y3windice] = YG_ETR2(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_ETR2()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR2; ++Yws){
				 YETR2(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_ETR2(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR2; ++Yws){
				 YETR2(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_ETR2(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("ETR2", Yws, Yw1, Yw2, Yw3, Ywt, &YS_ETR2(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_ETR2 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], ETR2 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_ETR2)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_ETR2()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YETR2(Yw1) = new ETR2 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_ETR3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR3; ++Yws){
				 YG_ETR3(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_ETR3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR3; ++Yws){
				 YG_ETR3(Yws, Yw1, Ywt) = YD_ETR3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_ETR3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR3; ++Yws){
				 YD_ETR3(Yws, Yw1, Ywt) = YS_ETR3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_ETR3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR3; ++Yws){
				 YD_ETR3(Yws, Yw1, Ywt) = YG_ETR3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_ETR3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR3; ++Yws){
				 YS_ETR3(Yws, Yw1, Ywt) = YD_ETR3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_ETR3(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR3; ++Yws){
				 YS_ETR3(Yws, Yw1, Ywt) = YD_ETR3(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_ETR3(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR3; ++Yws){
				 YS_ETR3(Yws, Yw1, Ywt) = YD_ETR3(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_ETR3(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR3; ++Yws){
				 YG_ETR3(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_ETR3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR3; ++Yws){
				 YG_ETR3(Yws, Yw1, Ywt) = YS_ETR3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_ETR3(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR3; ++Yws){
				 YG_ETR3(Yws, Yw1, Ywt) = YS_ETR3(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_ETR3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR3; ++Yws){
				 tab[Y3windice] = YS_ETR3(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_ETR3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR3; ++Yws){
				 tab[Y3windice] = YG_ETR3(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_ETR3()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR3; ++Yws){
				 YETR3(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_ETR3(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR3; ++Yws){
				 YETR3(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_ETR3(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("ETR3", Yws, Yw1, Yw2, Yw3, Ywt, &YS_ETR3(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_ETR3 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], ETR3 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_ETR3)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_ETR3()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YETR3(Yw1) = new ETR3 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_ETR4(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR4; ++Yws){
				 YG_ETR4(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_ETR4(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR4; ++Yws){
				 YG_ETR4(Yws, Yw1, Ywt) = YD_ETR4(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_ETR4(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR4; ++Yws){
				 YD_ETR4(Yws, Yw1, Ywt) = YS_ETR4(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_ETR4(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR4; ++Yws){
				 YD_ETR4(Yws, Yw1, Ywt) = YG_ETR4(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_ETR4(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR4; ++Yws){
				 YS_ETR4(Yws, Yw1, Ywt) = YD_ETR4(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_ETR4(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR4; ++Yws){
				 YS_ETR4(Yws, Yw1, Ywt) = YD_ETR4(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_ETR4(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR4; ++Yws){
				 YS_ETR4(Yws, Yw1, Ywt) = YD_ETR4(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_ETR4(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR4; ++Yws){
				 YG_ETR4(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_ETR4(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR4; ++Yws){
				 YG_ETR4(Yws, Yw1, Ywt) = YS_ETR4(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_ETR4(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR4; ++Yws){
				 YG_ETR4(Yws, Yw1, Ywt) = YS_ETR4(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_ETR4(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR4; ++Yws){
				 tab[Y3windice] = YS_ETR4(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_ETR4(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR4; ++Yws){
				 tab[Y3windice] = YG_ETR4(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_ETR4()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR4; ++Yws){
				 YETR4(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_ETR4(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ETR4; ++Yws){
				 YETR4(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_ETR4(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("ETR4", Yws, Yw1, Yw2, Yw3, Ywt, &YS_ETR4(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_ETR4 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], ETR4 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_ETR4)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_ETR4()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YETR4(Yw1) = new ETR4 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_R11(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R11; ++Yws){
				 YG_R11(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_R11(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R11; ++Yws){
				 YG_R11(Yws, Yw1, Ywt) = YD_R11(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_R11(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R11; ++Yws){
				 YD_R11(Yws, Yw1, Ywt) = YS_R11(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_R11(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R11; ++Yws){
				 YD_R11(Yws, Yw1, Ywt) = YG_R11(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_R11(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R11; ++Yws){
				 YS_R11(Yws, Yw1, Ywt) = YD_R11(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_R11(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R11; ++Yws){
				 YS_R11(Yws, Yw1, Ywt) = YD_R11(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_R11(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R11; ++Yws){
				 YS_R11(Yws, Yw1, Ywt) = YD_R11(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_R11(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R11; ++Yws){
				 YG_R11(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_R11(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R11; ++Yws){
				 YG_R11(Yws, Yw1, Ywt) = YS_R11(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_R11(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R11; ++Yws){
				 YG_R11(Yws, Yw1, Ywt) = YS_R11(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_R11(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R11; ++Yws){
				 tab[Y3windice] = YS_R11(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_R11(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R11; ++Yws){
				 tab[Y3windice] = YG_R11(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_R11()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_R11; ++Yws){
				 YR11(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_R11(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R11; ++Yws){
				 YR11(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_R11(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("R11", Yws, Yw1, Yw2, Yw3, Ywt, &YS_R11(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_R11 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], R11 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_R11)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_R11()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YR11(Yw1) = new R11 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_R12(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R12; ++Yws){
				 YG_R12(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_R12(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R12; ++Yws){
				 YG_R12(Yws, Yw1, Ywt) = YD_R12(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_R12(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R12; ++Yws){
				 YD_R12(Yws, Yw1, Ywt) = YS_R12(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_R12(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R12; ++Yws){
				 YD_R12(Yws, Yw1, Ywt) = YG_R12(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_R12(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R12; ++Yws){
				 YS_R12(Yws, Yw1, Ywt) = YD_R12(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_R12(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R12; ++Yws){
				 YS_R12(Yws, Yw1, Ywt) = YD_R12(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_R12(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R12; ++Yws){
				 YS_R12(Yws, Yw1, Ywt) = YD_R12(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_R12(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R12; ++Yws){
				 YG_R12(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_R12(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R12; ++Yws){
				 YG_R12(Yws, Yw1, Ywt) = YS_R12(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_R12(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R12; ++Yws){
				 YG_R12(Yws, Yw1, Ywt) = YS_R12(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_R12(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R12; ++Yws){
				 tab[Y3windice] = YS_R12(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_R12(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R12; ++Yws){
				 tab[Y3windice] = YG_R12(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_R12()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_R12; ++Yws){
				 YR12(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_R12(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R12; ++Yws){
				 YR12(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_R12(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("R12", Yws, Yw1, Yw2, Yw3, Ywt, &YS_R12(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_R12 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], R12 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_R12)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_R12()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YR12(Yw1) = new R12 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_R13(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R13; ++Yws){
				 YG_R13(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_R13(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R13; ++Yws){
				 YG_R13(Yws, Yw1, Ywt) = YD_R13(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_R13(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R13; ++Yws){
				 YD_R13(Yws, Yw1, Ywt) = YS_R13(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_R13(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R13; ++Yws){
				 YD_R13(Yws, Yw1, Ywt) = YG_R13(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_R13(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R13; ++Yws){
				 YS_R13(Yws, Yw1, Ywt) = YD_R13(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_R13(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R13; ++Yws){
				 YS_R13(Yws, Yw1, Ywt) = YD_R13(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_R13(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R13; ++Yws){
				 YS_R13(Yws, Yw1, Ywt) = YD_R13(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_R13(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R13; ++Yws){
				 YG_R13(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_R13(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R13; ++Yws){
				 YG_R13(Yws, Yw1, Ywt) = YS_R13(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_R13(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R13; ++Yws){
				 YG_R13(Yws, Yw1, Ywt) = YS_R13(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_R13(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R13; ++Yws){
				 tab[Y3windice] = YS_R13(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_R13(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R13; ++Yws){
				 tab[Y3windice] = YG_R13(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_R13()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_R13; ++Yws){
				 YR13(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_R13(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R13; ++Yws){
				 YR13(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_R13(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("R13", Yws, Yw1, Yw2, Yw3, Ywt, &YS_R13(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_R13 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], R13 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_R13)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_R13()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YR13(Yw1) = new R13 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_R14(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R14; ++Yws){
				 YG_R14(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_R14(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R14; ++Yws){
				 YG_R14(Yws, Yw1, Ywt) = YD_R14(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_R14(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R14; ++Yws){
				 YD_R14(Yws, Yw1, Ywt) = YS_R14(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_R14(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R14; ++Yws){
				 YD_R14(Yws, Yw1, Ywt) = YG_R14(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_R14(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R14; ++Yws){
				 YS_R14(Yws, Yw1, Ywt) = YD_R14(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_R14(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R14; ++Yws){
				 YS_R14(Yws, Yw1, Ywt) = YD_R14(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_R14(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R14; ++Yws){
				 YS_R14(Yws, Yw1, Ywt) = YD_R14(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_R14(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R14; ++Yws){
				 YG_R14(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_R14(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R14; ++Yws){
				 YG_R14(Yws, Yw1, Ywt) = YS_R14(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_R14(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R14; ++Yws){
				 YG_R14(Yws, Yw1, Ywt) = YS_R14(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_R14(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R14; ++Yws){
				 tab[Y3windice] = YS_R14(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_R14(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R14; ++Yws){
				 tab[Y3windice] = YG_R14(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_R14()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_R14; ++Yws){
				 YR14(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_R14(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R14; ++Yws){
				 YR14(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_R14(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("R14", Yws, Yw1, Yw2, Yw3, Ywt, &YS_R14(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_R14 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], R14 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_R14)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_R14()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YR14(Yw1) = new R14 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_R15(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R15; ++Yws){
				 YG_R15(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_R15(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R15; ++Yws){
				 YG_R15(Yws, Yw1, Ywt) = YD_R15(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_R15(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R15; ++Yws){
				 YD_R15(Yws, Yw1, Ywt) = YS_R15(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_R15(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R15; ++Yws){
				 YD_R15(Yws, Yw1, Ywt) = YG_R15(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_R15(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R15; ++Yws){
				 YS_R15(Yws, Yw1, Ywt) = YD_R15(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_R15(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R15; ++Yws){
				 YS_R15(Yws, Yw1, Ywt) = YD_R15(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_R15(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R15; ++Yws){
				 YS_R15(Yws, Yw1, Ywt) = YD_R15(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_R15(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R15; ++Yws){
				 YG_R15(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_R15(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R15; ++Yws){
				 YG_R15(Yws, Yw1, Ywt) = YS_R15(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_R15(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R15; ++Yws){
				 YG_R15(Yws, Yw1, Ywt) = YS_R15(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_R15(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R15; ++Yws){
				 tab[Y3windice] = YS_R15(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_R15(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R15; ++Yws){
				 tab[Y3windice] = YG_R15(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_R15()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_R15; ++Yws){
				 YR15(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_R15(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R15; ++Yws){
				 YR15(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_R15(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("R15", Yws, Yw1, Yw2, Yw3, Ywt, &YS_R15(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_R15 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], R15 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_R15)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_R15()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YR15(Yw1) = new R15 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_R21(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R21; ++Yws){
				 YG_R21(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_R21(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R21; ++Yws){
				 YG_R21(Yws, Yw1, Ywt) = YD_R21(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_R21(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R21; ++Yws){
				 YD_R21(Yws, Yw1, Ywt) = YS_R21(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_R21(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R21; ++Yws){
				 YD_R21(Yws, Yw1, Ywt) = YG_R21(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_R21(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R21; ++Yws){
				 YS_R21(Yws, Yw1, Ywt) = YD_R21(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_R21(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R21; ++Yws){
				 YS_R21(Yws, Yw1, Ywt) = YD_R21(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_R21(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R21; ++Yws){
				 YS_R21(Yws, Yw1, Ywt) = YD_R21(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_R21(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R21; ++Yws){
				 YG_R21(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_R21(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R21; ++Yws){
				 YG_R21(Yws, Yw1, Ywt) = YS_R21(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_R21(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R21; ++Yws){
				 YG_R21(Yws, Yw1, Ywt) = YS_R21(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_R21(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R21; ++Yws){
				 tab[Y3windice] = YS_R21(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_R21(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R21; ++Yws){
				 tab[Y3windice] = YG_R21(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_R21()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_R21; ++Yws){
				 YR21(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_R21(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R21; ++Yws){
				 YR21(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_R21(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("R21", Yws, Yw1, Yw2, Yw3, Ywt, &YS_R21(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_R21 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], R21 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_R21)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_R21()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YR21(Yw1) = new R21 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_R22(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R22; ++Yws){
				 YG_R22(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_R22(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R22; ++Yws){
				 YG_R22(Yws, Yw1, Ywt) = YD_R22(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_R22(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R22; ++Yws){
				 YD_R22(Yws, Yw1, Ywt) = YS_R22(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_R22(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R22; ++Yws){
				 YD_R22(Yws, Yw1, Ywt) = YG_R22(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_R22(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R22; ++Yws){
				 YS_R22(Yws, Yw1, Ywt) = YD_R22(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_R22(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R22; ++Yws){
				 YS_R22(Yws, Yw1, Ywt) = YD_R22(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_R22(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R22; ++Yws){
				 YS_R22(Yws, Yw1, Ywt) = YD_R22(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_R22(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R22; ++Yws){
				 YG_R22(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_R22(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R22; ++Yws){
				 YG_R22(Yws, Yw1, Ywt) = YS_R22(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_R22(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R22; ++Yws){
				 YG_R22(Yws, Yw1, Ywt) = YS_R22(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_R22(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R22; ++Yws){
				 tab[Y3windice] = YS_R22(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_R22(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R22; ++Yws){
				 tab[Y3windice] = YG_R22(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_R22()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_R22; ++Yws){
				 YR22(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_R22(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R22; ++Yws){
				 YR22(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_R22(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("R22", Yws, Yw1, Yw2, Yw3, Ywt, &YS_R22(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_R22 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], R22 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_R22)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_R22()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YR22(Yw1) = new R22 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_R23(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R23; ++Yws){
				 YG_R23(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_R23(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R23; ++Yws){
				 YG_R23(Yws, Yw1, Ywt) = YD_R23(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_R23(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R23; ++Yws){
				 YD_R23(Yws, Yw1, Ywt) = YS_R23(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_R23(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R23; ++Yws){
				 YD_R23(Yws, Yw1, Ywt) = YG_R23(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_R23(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R23; ++Yws){
				 YS_R23(Yws, Yw1, Ywt) = YD_R23(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_R23(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R23; ++Yws){
				 YS_R23(Yws, Yw1, Ywt) = YD_R23(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_R23(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R23; ++Yws){
				 YS_R23(Yws, Yw1, Ywt) = YD_R23(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_R23(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R23; ++Yws){
				 YG_R23(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_R23(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R23; ++Yws){
				 YG_R23(Yws, Yw1, Ywt) = YS_R23(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_R23(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R23; ++Yws){
				 YG_R23(Yws, Yw1, Ywt) = YS_R23(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_R23(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R23; ++Yws){
				 tab[Y3windice] = YS_R23(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_R23(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R23; ++Yws){
				 tab[Y3windice] = YG_R23(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_R23()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_R23; ++Yws){
				 YR23(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_R23(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R23; ++Yws){
				 YR23(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_R23(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("R23", Yws, Yw1, Yw2, Yw3, Ywt, &YS_R23(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_R23 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], R23 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_R23)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_R23()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YR23(Yw1) = new R23 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_R3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R3; ++Yws){
				 YG_R3(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_R3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R3; ++Yws){
				 YG_R3(Yws, Yw1, Ywt) = YD_R3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_R3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R3; ++Yws){
				 YD_R3(Yws, Yw1, Ywt) = YS_R3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_R3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R3; ++Yws){
				 YD_R3(Yws, Yw1, Ywt) = YG_R3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_R3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R3; ++Yws){
				 YS_R3(Yws, Yw1, Ywt) = YD_R3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_R3(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R3; ++Yws){
				 YS_R3(Yws, Yw1, Ywt) = YD_R3(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_R3(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R3; ++Yws){
				 YS_R3(Yws, Yw1, Ywt) = YD_R3(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_R3(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R3; ++Yws){
				 YG_R3(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_R3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R3; ++Yws){
				 YG_R3(Yws, Yw1, Ywt) = YS_R3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_R3(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R3; ++Yws){
				 YG_R3(Yws, Yw1, Ywt) = YS_R3(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_R3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R3; ++Yws){
				 tab[Y3windice] = YS_R3(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_R3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R3; ++Yws){
				 tab[Y3windice] = YG_R3(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_R3()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_R3; ++Yws){
				 YR3(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_R3(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R3; ++Yws){
				 YR3(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_R3(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("R3", Yws, Yw1, Yw2, Yw3, Ywt, &YS_R3(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_R3 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], R3 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_R3)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_R3()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YR3(Yw1) = new R3 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_QTOT(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QTOT; ++Yws){
				 YG_QTOT(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_QTOT(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QTOT; ++Yws){
				 YG_QTOT(Yws, Yw1, Ywt) = YD_QTOT(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_QTOT(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QTOT; ++Yws){
				 YD_QTOT(Yws, Yw1, Ywt) = YS_QTOT(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_QTOT(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QTOT; ++Yws){
				 YD_QTOT(Yws, Yw1, Ywt) = YG_QTOT(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_QTOT(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QTOT; ++Yws){
				 YS_QTOT(Yws, Yw1, Ywt) = YD_QTOT(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_QTOT(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QTOT; ++Yws){
				 YS_QTOT(Yws, Yw1, Ywt) = YD_QTOT(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_QTOT(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QTOT; ++Yws){
				 YS_QTOT(Yws, Yw1, Ywt) = YD_QTOT(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_QTOT(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QTOT; ++Yws){
				 YG_QTOT(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_QTOT(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QTOT; ++Yws){
				 YG_QTOT(Yws, Yw1, Ywt) = YS_QTOT(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_QTOT(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QTOT; ++Yws){
				 YG_QTOT(Yws, Yw1, Ywt) = YS_QTOT(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_QTOT(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QTOT; ++Yws){
				 tab[Y3windice] = YS_QTOT(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_QTOT(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QTOT; ++Yws){
				 tab[Y3windice] = YG_QTOT(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_QTOT()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_QTOT; ++Yws){
				 YQTOT(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_QTOT(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QTOT; ++Yws){
				 YQTOT(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_QTOT(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("QTOT", Yws, Yw1, Yw2, Yw3, Ywt, &YS_QTOT(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_QTOT (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], QTOT *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_QTOT)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_QTOT()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YQTOT(Yw1) = new QTOT ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_MAXBAS(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MAXBAS; ++Yws){
				 YG_MAXBAS(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_MAXBAS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MAXBAS; ++Yws){
				 YG_MAXBAS(Yws, Yw1, Ywt) = YD_MAXBAS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_MAXBAS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MAXBAS; ++Yws){
				 YD_MAXBAS(Yws, Yw1, Ywt) = YS_MAXBAS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_MAXBAS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MAXBAS; ++Yws){
				 YD_MAXBAS(Yws, Yw1, Ywt) = YG_MAXBAS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_MAXBAS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MAXBAS; ++Yws){
				 YS_MAXBAS(Yws, Yw1, Ywt) = YD_MAXBAS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_MAXBAS(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MAXBAS; ++Yws){
				 YS_MAXBAS(Yws, Yw1, Ywt) = YD_MAXBAS(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_MAXBAS(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MAXBAS; ++Yws){
				 YS_MAXBAS(Yws, Yw1, Ywt) = YD_MAXBAS(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_MAXBAS(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MAXBAS; ++Yws){
				 YG_MAXBAS(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_MAXBAS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MAXBAS; ++Yws){
				 YG_MAXBAS(Yws, Yw1, Ywt) = YS_MAXBAS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_MAXBAS(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MAXBAS; ++Yws){
				 YG_MAXBAS(Yws, Yw1, Ywt) = YS_MAXBAS(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_MAXBAS(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MAXBAS; ++Yws){
				 tab[Y3windice] = YS_MAXBAS(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_MAXBAS(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MAXBAS; ++Yws){
				 tab[Y3windice] = YG_MAXBAS(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_MAXBAS()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_MAXBAS; ++Yws){
				 YMAXBAS(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_MAXBAS(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MAXBAS; ++Yws){
				 YMAXBAS(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_MAXBAS(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("MAXBAS", Yws, Yw1, Yw2, Yw3, Ywt, &YS_MAXBAS(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_MAXBAS (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], MAXBAS *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_MAXBAS)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_MAXBAS()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YMAXBAS(Yw1) = new MAXBAS ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_Q1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YG_Q1(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_Q1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YG_Q1(Yws, Yw1, Ywt) = YD_Q1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_Q1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YD_Q1(Yws, Yw1, Ywt) = YS_Q1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_Q1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YD_Q1(Yws, Yw1, Ywt) = YG_Q1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_Q1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YS_Q1(Yws, Yw1, Ywt) = YD_Q1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_Q1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YS_Q1(Yws, Yw1, Ywt) = YD_Q1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_Q1(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YS_Q1(Yws, Yw1, Ywt) = YD_Q1(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_Q1(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YG_Q1(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_Q1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YG_Q1(Yws, Yw1, Ywt) = YS_Q1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_Q1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YG_Q1(Yws, Yw1, Ywt) = YS_Q1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_Q1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 tab[Y3windice] = YS_Q1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_Q1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 tab[Y3windice] = YG_Q1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_Q1()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YQ1(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_Q1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YQ1(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_Q1(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("Q1", Yws, Yw1, Yw2, Yw3, Ywt, &YS_Q1(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_Q1 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], Q1 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_Q1)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_Q1()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YQ1(Yw1) = new Q1 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_Q2(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q2; ++Yws){
				 YG_Q2(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_Q2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q2; ++Yws){
				 YG_Q2(Yws, Yw1, Ywt) = YD_Q2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_Q2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q2; ++Yws){
				 YD_Q2(Yws, Yw1, Ywt) = YS_Q2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_Q2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q2; ++Yws){
				 YD_Q2(Yws, Yw1, Ywt) = YG_Q2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_Q2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q2; ++Yws){
				 YS_Q2(Yws, Yw1, Ywt) = YD_Q2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_Q2(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q2; ++Yws){
				 YS_Q2(Yws, Yw1, Ywt) = YD_Q2(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_Q2(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q2; ++Yws){
				 YS_Q2(Yws, Yw1, Ywt) = YD_Q2(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_Q2(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q2; ++Yws){
				 YG_Q2(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_Q2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q2; ++Yws){
				 YG_Q2(Yws, Yw1, Ywt) = YS_Q2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_Q2(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q2; ++Yws){
				 YG_Q2(Yws, Yw1, Ywt) = YS_Q2(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_Q2(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q2; ++Yws){
				 tab[Y3windice] = YS_Q2(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_Q2(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q2; ++Yws){
				 tab[Y3windice] = YG_Q2(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_Q2()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q2; ++Yws){
				 YQ2(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_Q2(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q2; ++Yws){
				 YQ2(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_Q2(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("Q2", Yws, Yw1, Yw2, Yw3, Ywt, &YS_Q2(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_Q2 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], Q2 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_Q2)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_Q2()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YQ2(Yw1) = new Q2 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_Q3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q3; ++Yws){
				 YG_Q3(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_Q3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q3; ++Yws){
				 YG_Q3(Yws, Yw1, Ywt) = YD_Q3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_Q3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q3; ++Yws){
				 YD_Q3(Yws, Yw1, Ywt) = YS_Q3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_Q3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q3; ++Yws){
				 YD_Q3(Yws, Yw1, Ywt) = YG_Q3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_Q3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q3; ++Yws){
				 YS_Q3(Yws, Yw1, Ywt) = YD_Q3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_Q3(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q3; ++Yws){
				 YS_Q3(Yws, Yw1, Ywt) = YD_Q3(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_Q3(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q3; ++Yws){
				 YS_Q3(Yws, Yw1, Ywt) = YD_Q3(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_Q3(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q3; ++Yws){
				 YG_Q3(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_Q3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q3; ++Yws){
				 YG_Q3(Yws, Yw1, Ywt) = YS_Q3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_Q3(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q3; ++Yws){
				 YG_Q3(Yws, Yw1, Ywt) = YS_Q3(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_Q3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q3; ++Yws){
				 tab[Y3windice] = YS_Q3(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_Q3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q3; ++Yws){
				 tab[Y3windice] = YG_Q3(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_Q3()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q3; ++Yws){
				 YQ3(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_Q3(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q3; ++Yws){
				 YQ3(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_Q3(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("Q3", Yws, Yw1, Yw2, Yw3, Ywt, &YS_Q3(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_Q3 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], Q3 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_Q3)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_Q3()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YQ3(Yw1) = new Q3 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_STW1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW1; ++Yws){
				 YG_STW1(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_STW1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW1; ++Yws){
				 YG_STW1(Yws, Yw1, Ywt) = YD_STW1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_STW1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW1; ++Yws){
				 YD_STW1(Yws, Yw1, Ywt) = YS_STW1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_STW1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW1; ++Yws){
				 YD_STW1(Yws, Yw1, Ywt) = YG_STW1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_STW1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW1; ++Yws){
				 YS_STW1(Yws, Yw1, Ywt) = YD_STW1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_STW1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW1; ++Yws){
				 YS_STW1(Yws, Yw1, Ywt) = YD_STW1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_STW1(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW1; ++Yws){
				 YS_STW1(Yws, Yw1, Ywt) = YD_STW1(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_STW1(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW1; ++Yws){
				 YG_STW1(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_STW1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW1; ++Yws){
				 YG_STW1(Yws, Yw1, Ywt) = YS_STW1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_STW1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW1; ++Yws){
				 YG_STW1(Yws, Yw1, Ywt) = YS_STW1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_STW1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW1; ++Yws){
				 tab[Y3windice] = YS_STW1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_STW1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW1; ++Yws){
				 tab[Y3windice] = YG_STW1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_STW1()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW1; ++Yws){
				 YSTW1(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_STW1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW1; ++Yws){
				 YSTW1(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_STW1(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("STW1", Yws, Yw1, Yw2, Yw3, Ywt, &YS_STW1(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_STW1 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], STW1 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_STW1)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_STW1()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YSTW1(Yw1) = new STW1 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_STW2(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW2; ++Yws){
				 YG_STW2(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_STW2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW2; ++Yws){
				 YG_STW2(Yws, Yw1, Ywt) = YD_STW2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_STW2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW2; ++Yws){
				 YD_STW2(Yws, Yw1, Ywt) = YS_STW2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_STW2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW2; ++Yws){
				 YD_STW2(Yws, Yw1, Ywt) = YG_STW2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_STW2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW2; ++Yws){
				 YS_STW2(Yws, Yw1, Ywt) = YD_STW2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_STW2(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW2; ++Yws){
				 YS_STW2(Yws, Yw1, Ywt) = YD_STW2(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_STW2(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW2; ++Yws){
				 YS_STW2(Yws, Yw1, Ywt) = YD_STW2(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_STW2(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW2; ++Yws){
				 YG_STW2(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_STW2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW2; ++Yws){
				 YG_STW2(Yws, Yw1, Ywt) = YS_STW2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_STW2(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW2; ++Yws){
				 YG_STW2(Yws, Yw1, Ywt) = YS_STW2(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_STW2(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW2; ++Yws){
				 tab[Y3windice] = YS_STW2(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_STW2(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW2; ++Yws){
				 tab[Y3windice] = YG_STW2(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_STW2()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW2; ++Yws){
				 YSTW2(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_STW2(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW2; ++Yws){
				 YSTW2(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_STW2(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("STW2", Yws, Yw1, Yw2, Yw3, Ywt, &YS_STW2(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_STW2 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], STW2 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_STW2)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_STW2()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YSTW2(Yw1) = new STW2 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_STW3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW3; ++Yws){
				 YG_STW3(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_STW3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW3; ++Yws){
				 YG_STW3(Yws, Yw1, Ywt) = YD_STW3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_STW3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW3; ++Yws){
				 YD_STW3(Yws, Yw1, Ywt) = YS_STW3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_STW3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW3; ++Yws){
				 YD_STW3(Yws, Yw1, Ywt) = YG_STW3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_STW3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW3; ++Yws){
				 YS_STW3(Yws, Yw1, Ywt) = YD_STW3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_STW3(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW3; ++Yws){
				 YS_STW3(Yws, Yw1, Ywt) = YD_STW3(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_STW3(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW3; ++Yws){
				 YS_STW3(Yws, Yw1, Ywt) = YD_STW3(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_STW3(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW3; ++Yws){
				 YG_STW3(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_STW3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW3; ++Yws){
				 YG_STW3(Yws, Yw1, Ywt) = YS_STW3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_STW3(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW3; ++Yws){
				 YG_STW3(Yws, Yw1, Ywt) = YS_STW3(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_STW3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW3; ++Yws){
				 tab[Y3windice] = YS_STW3(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_STW3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW3; ++Yws){
				 tab[Y3windice] = YG_STW3(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_STW3()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW3; ++Yws){
				 YSTW3(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_STW3(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_STW3; ++Yws){
				 YSTW3(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_STW3(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("STW3", Yws, Yw1, Yw2, Yw3, Ywt, &YS_STW3(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_STW3 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], STW3 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_STW3)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_STW3()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YSTW3(Yw1) = new STW3 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_SW(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SW; ++Yws){
				 YG_SW(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_SW(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SW; ++Yws){
				 YG_SW(Yws, Yw1, Ywt) = YD_SW(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_SW(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SW; ++Yws){
				 YD_SW(Yws, Yw1, Ywt) = YS_SW(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_SW(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SW; ++Yws){
				 YD_SW(Yws, Yw1, Ywt) = YG_SW(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_SW(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SW; ++Yws){
				 YS_SW(Yws, Yw1, Ywt) = YD_SW(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_SW(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SW; ++Yws){
				 YS_SW(Yws, Yw1, Ywt) = YD_SW(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_SW(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SW; ++Yws){
				 YS_SW(Yws, Yw1, Ywt) = YD_SW(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_SW(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SW; ++Yws){
				 YG_SW(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_SW(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SW; ++Yws){
				 YG_SW(Yws, Yw1, Ywt) = YS_SW(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_SW(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SW; ++Yws){
				 YG_SW(Yws, Yw1, Ywt) = YS_SW(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_SW(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SW; ++Yws){
				 tab[Y3windice] = YS_SW(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_SW(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SW; ++Yws){
				 tab[Y3windice] = YG_SW(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_SW()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_SW; ++Yws){
				 YSW(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_SW(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SW; ++Yws){
				 YSW(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_SW(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("SW", Yws, Yw1, Yw2, Yw3, Ywt, &YS_SW(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_SW (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], SW *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_SW)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_SW()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YSW(Yw1) = new SW ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_QS(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YG_QS(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_QS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YG_QS(Yws, Yw1, Ywt) = YD_QS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_QS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YD_QS(Yws, Yw1, Ywt) = YS_QS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_QS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YD_QS(Yws, Yw1, Ywt) = YG_QS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_QS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YS_QS(Yws, Yw1, Ywt) = YD_QS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_QS(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YS_QS(Yws, Yw1, Ywt) = YD_QS(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_QS(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YS_QS(Yws, Yw1, Ywt) = YD_QS(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_QS(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YG_QS(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_QS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YG_QS(Yws, Yw1, Ywt) = YS_QS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_QS(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YG_QS(Yws, Yw1, Ywt) = YS_QS(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_QS(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 tab[Y3windice] = YS_QS(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_QS(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 tab[Y3windice] = YG_QS(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_QS()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YQS(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_QS(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YQS(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_QS(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("QS", Yws, Yw1, Yw2, Yw3, Ywt, &YS_QS(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_QS (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], QS *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_QS)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M0_OUTOB*/ 
int Youtoobs_QS(YioKind yiokind, int Yws, int Ywt, int arbpdt)
{
	 Yaobs.time = arbpdt;
	 Yaobs.imod = Yimod("QS");
	 Yaobs.smod = Yws;/*M1_OUTOBT*/
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1)
	 {	if(select_io(yiokind, "QS", Yws, Yw1, -1, -1, Ywt, &Ystate_QS(Yws, Yw1, Ywt)))
			{	Yaobs.iaxe = Yw1; Yaobs.jaxe = -1; Yaobs.kaxe = -1;
				Yaobs.vobs = Ystate_QS(Yws, Yw1, Ywt);
				if(!Yobs_insert (&Yaobs)) return(0);
			}
	 }/*M9_OUTOB*/  
	 return(1);
}/*M1_CREU*/ 
void Ycreate_QS()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YQS(Yw1) = new QS ())==NULL) Ycreate_errnew();}
}/*M1_SWISH*/ 
void Ysetwish_QS(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Yws=0; Yws<YNBS_QS; ++Yws){
			 Ywish_QS(Yws, Yw1) = val;}}
}
void Ycreate_all () 
{
	 Ycreate_TC ();
	 Ycreate_degd ();
	 Ycreate_HL1 ();
	 Ycreate_AUFT ();
	 Ycreate_FC ();
	 Ycreate_BE ();
	 Ycreate_CEF ();
	 Ycreate_PWP ();
	 Ycreate_K1 ();
	 Ycreate_K2 ();
	 Ycreate_K3 ();
	 Ycreate_ALPHA ();
	 Ycreate_PER1 ();
	 Ycreate_PER2 ();
	 Ycreate_PE ();
	 Ycreate_TT ();
	 Ycreate_TM ();
	 Ycreate_ETPM ();
	 Ycreate_Snow ();
	 Ycreate_AUFTHL11 ();
	 Ycreate_AUFTHL12 ();
	 Ycreate_Soil1 ();
	 Ycreate_Soil2 ();
	 Ycreate_Soil3 ();
	 Ycreate_Soil4 ();
	 Ycreate_ETP ();
	 Ycreate_ETR1 ();
	 Ycreate_ETR2 ();
	 Ycreate_ETR3 ();
	 Ycreate_ETR4 ();
	 Ycreate_R11 ();
	 Ycreate_R12 ();
	 Ycreate_R13 ();
	 Ycreate_R14 ();
	 Ycreate_R15 ();
	 Ycreate_R21 ();
	 Ycreate_R22 ();
	 Ycreate_R23 ();
	 Ycreate_R3 ();
	 Ycreate_QTOT ();
	 Ycreate_MAXBAS ();
	 Ycreate_Q1 ();
	 Ycreate_Q2 ();
	 Ycreate_Q3 ();
	 Ycreate_STW1 ();
	 Ycreate_STW2 ();
	 Ycreate_STW3 ();
	 Ycreate_SW ();
	 Ycreate_QS ();
}
void Ywishdiff_all (char *nmmod, int Yws, int Yw1, int Yw2, int Yw3, int Ywt, YREAL vobs) 
{	
	 if(1==0);
	 else if (strcmp(nmmod, "FC") == 0)
				 YW_FC(Yws, Yw1) = YS_FC(Yws, Yw1) - vobs;
	 else if (strcmp(nmmod, "QS") == 0)
				 YW_QS(Yws, Yw1) = YS_QS(Yws, Yw1, Ywt) - vobs;
}
void Ycostwishdiff_all (char *nmmod, int Yws, int Yw1, int Yw2, int Yw3, int Ywt) 
{	
	 if(1==0);
	 else if (strcmp(nmmod, "FC") == 0)
				 YG_FC(Yws, Yw1) += Ycostdiff(YW_FC(Yws, Yw1), YW_FC(Yws, Yw1));
	 else if (strcmp(nmmod, "QS") == 0)
				 YG_QS(Yws, Yw1, Ywt) += Ycostdiff(YW_QS(Yws, Yw1), YW_QS(Yws, Yw1));
}
void Yc_dstar_all (int indic, char *nmmod, int nout, int iaxe, int jaxe, int kaxe, int apdt, int pdt, YREAL *vobs, YREAL *qtea) 
{	
	 if(1==0);
	 else if (strcmp(nmmod, "FC") == 0)
				 *qtea = YG_FC(nout, iaxe) - (*vobs - YS_FC(nout, iaxe));
	 else if (strcmp(nmmod, "QS") == 0)
				 *qtea = YG_QS(nout, iaxe, pdt) - (*vobs - YS_QS(nout, iaxe, pdt));
}
void Ywishqtea_all (char *nmmod, int Yws, int Yw1, int Yw2, int Yw3, YREAL qtea) 
{	
	 if(1==0);
	 else if (strcmp(nmmod, "FC") == 0)
				 YW_FC(Yws, Yw1) = qtea;
	 else if (strcmp(nmmod, "QS") == 0)
				 YW_QS(Yws, Yw1) = qtea;
}
void Ycostwishqtea_all (char *nmmod, int Yws, int Yw1, int Yw2, int Yw3, int Ywt, YREAL qtea) 
{	
	 if(1==0);
	 else if (strcmp(nmmod, "FC") == 0)
				 YG_FC(Yws, Yw1) += Ycostdiff(qtea, YW_FC(Yws, Yw1));
	 else if (strcmp(nmmod, "QS") == 0)
				 YG_QS(Yws, Yw1, Ywt) += Ycostdiff(qtea, YW_QS(Yws, Yw1));
}
void Youtoobs_mod(YioKind yiokind, char *nmmod, int numout, int pdt, int arbpdt)
{
 	 if(1==0);
 	 else if (strcmp(nmmod, "FC") == 0) Youtoobs_FC(yiokind, numout, pdt, arbpdt);
 	 else if (strcmp(nmmod, "QS") == 0) Youtoobs_QS(yiokind, numout, pdt, arbpdt);
}
void Yadjust_all () 
{
	 Yadjust_FC ();
}
void Yc_adjustd_all () 
{
	 Yc_adjustd_FC ();
}
void Yc_adjustk_all () 
{
	 Yc_adjustk_FC ();
}
void Yrazgrad_all () 
{
	 Yrazgrad_TC ();
	 Yrazgrad_degd ();
	 Yrazgrad_HL1 ();
	 Yrazgrad_AUFT ();
	 Yrazgrad_FC ();
	 Yrazgrad_BE ();
	 Yrazgrad_CEF ();
	 Yrazgrad_PWP ();
	 Yrazgrad_K1 ();
	 Yrazgrad_K2 ();
	 Yrazgrad_K3 ();
	 Yrazgrad_ALPHA ();
	 Yrazgrad_PER1 ();
	 Yrazgrad_PER2 ();
	 Yrazgrad_PE ();
	 Yrazgrad_TT ();
	 Yrazgrad_TM ();
	 Yrazgrad_ETPM ();
	 Yrazgrad_Snow ();
	 Yrazgrad_AUFTHL11 ();
	 Yrazgrad_AUFTHL12 ();
	 Yrazgrad_Soil1 ();
	 Yrazgrad_Soil2 ();
	 Yrazgrad_Soil3 ();
	 Yrazgrad_Soil4 ();
	 Yrazgrad_ETP ();
	 Yrazgrad_ETR1 ();
	 Yrazgrad_ETR2 ();
	 Yrazgrad_ETR3 ();
	 Yrazgrad_ETR4 ();
	 Yrazgrad_R11 ();
	 Yrazgrad_R12 ();
	 Yrazgrad_R13 ();
	 Yrazgrad_R14 ();
	 Yrazgrad_R15 ();
	 Yrazgrad_R21 ();
	 Yrazgrad_R22 ();
	 Yrazgrad_R23 ();
	 Yrazgrad_R3 ();
	 Yrazgrad_QTOT ();
	 Yrazgrad_MAXBAS ();
	 Yrazgrad_Q1 ();
	 Yrazgrad_Q2 ();
	 Yrazgrad_Q3 ();
	 Yrazgrad_STW1 ();
	 Yrazgrad_STW2 ();
	 Yrazgrad_STW3 ();
	 Yrazgrad_SW ();
	 Yrazgrad_QS ();
}
void Yrazgrad_only (int itraj) 
{
	if (itraj==Yid_Tpar)
	{}
	if (itraj==Yid_Tm)
	{}
}
int Ysetstate_mod (char *nmmod, YREAL val) 
{	int codret=0; int all=0;
	if (!strcmp(nmmod, "Y#A")) all=1;
	if (!strcmp(nmmod, "TC") || all)
	{  Ysetstate_TC(val);codret=1;}
	if (!strcmp(nmmod, "degd") || all)
	{  Ysetstate_degd(val);codret=1;}
	if (!strcmp(nmmod, "HL1") || all)
	{  Ysetstate_HL1(val);codret=1;}
	if (!strcmp(nmmod, "AUFT") || all)
	{  Ysetstate_AUFT(val);codret=1;}
	if (!strcmp(nmmod, "FC") || all)
	{  Ysetstate_FC(val);codret=1;}
	if (!strcmp(nmmod, "BE") || all)
	{  Ysetstate_BE(val);codret=1;}
	if (!strcmp(nmmod, "CEF") || all)
	{  Ysetstate_CEF(val);codret=1;}
	if (!strcmp(nmmod, "PWP") || all)
	{  Ysetstate_PWP(val);codret=1;}
	if (!strcmp(nmmod, "K1") || all)
	{  Ysetstate_K1(val);codret=1;}
	if (!strcmp(nmmod, "K2") || all)
	{  Ysetstate_K2(val);codret=1;}
	if (!strcmp(nmmod, "K3") || all)
	{  Ysetstate_K3(val);codret=1;}
	if (!strcmp(nmmod, "ALPHA") || all)
	{  Ysetstate_ALPHA(val);codret=1;}
	if (!strcmp(nmmod, "PER1") || all)
	{  Ysetstate_PER1(val);codret=1;}
	if (!strcmp(nmmod, "PER2") || all)
	{  Ysetstate_PER2(val);codret=1;}
	if (!strcmp(nmmod, "PE") || all)
	{  Ysetstate_PE(val);codret=1;}
	if (!strcmp(nmmod, "TT") || all)
	{  Ysetstate_TT(val);codret=1;}
	if (!strcmp(nmmod, "TM") || all)
	{  Ysetstate_TM(val);codret=1;}
	if (!strcmp(nmmod, "ETPM") || all)
	{  Ysetstate_ETPM(val);codret=1;}
	if (!strcmp(nmmod, "Snow") || all)
	{  Ysetstate_Snow(val);codret=1;}
	if (!strcmp(nmmod, "AUFTHL11") || all)
	{  Ysetstate_AUFTHL11(val);codret=1;}
	if (!strcmp(nmmod, "AUFTHL12") || all)
	{  Ysetstate_AUFTHL12(val);codret=1;}
	if (!strcmp(nmmod, "Soil1") || all)
	{  Ysetstate_Soil1(val);codret=1;}
	if (!strcmp(nmmod, "Soil2") || all)
	{  Ysetstate_Soil2(val);codret=1;}
	if (!strcmp(nmmod, "Soil3") || all)
	{  Ysetstate_Soil3(val);codret=1;}
	if (!strcmp(nmmod, "Soil4") || all)
	{  Ysetstate_Soil4(val);codret=1;}
	if (!strcmp(nmmod, "ETP") || all)
	{  Ysetstate_ETP(val);codret=1;}
	if (!strcmp(nmmod, "ETR1") || all)
	{  Ysetstate_ETR1(val);codret=1;}
	if (!strcmp(nmmod, "ETR2") || all)
	{  Ysetstate_ETR2(val);codret=1;}
	if (!strcmp(nmmod, "ETR3") || all)
	{  Ysetstate_ETR3(val);codret=1;}
	if (!strcmp(nmmod, "ETR4") || all)
	{  Ysetstate_ETR4(val);codret=1;}
	if (!strcmp(nmmod, "R11") || all)
	{  Ysetstate_R11(val);codret=1;}
	if (!strcmp(nmmod, "R12") || all)
	{  Ysetstate_R12(val);codret=1;}
	if (!strcmp(nmmod, "R13") || all)
	{  Ysetstate_R13(val);codret=1;}
	if (!strcmp(nmmod, "R14") || all)
	{  Ysetstate_R14(val);codret=1;}
	if (!strcmp(nmmod, "R15") || all)
	{  Ysetstate_R15(val);codret=1;}
	if (!strcmp(nmmod, "R21") || all)
	{  Ysetstate_R21(val);codret=1;}
	if (!strcmp(nmmod, "R22") || all)
	{  Ysetstate_R22(val);codret=1;}
	if (!strcmp(nmmod, "R23") || all)
	{  Ysetstate_R23(val);codret=1;}
	if (!strcmp(nmmod, "R3") || all)
	{  Ysetstate_R3(val);codret=1;}
	if (!strcmp(nmmod, "QTOT") || all)
	{  Ysetstate_QTOT(val);codret=1;}
	if (!strcmp(nmmod, "MAXBAS") || all)
	{  Ysetstate_MAXBAS(val);codret=1;}
	if (!strcmp(nmmod, "Q1") || all)
	{  Ysetstate_Q1(val);codret=1;}
	if (!strcmp(nmmod, "Q2") || all)
	{  Ysetstate_Q2(val);codret=1;}
	if (!strcmp(nmmod, "Q3") || all)
	{  Ysetstate_Q3(val);codret=1;}
	if (!strcmp(nmmod, "STW1") || all)
	{  Ysetstate_STW1(val);codret=1;}
	if (!strcmp(nmmod, "STW2") || all)
	{  Ysetstate_STW2(val);codret=1;}
	if (!strcmp(nmmod, "STW3") || all)
	{  Ysetstate_STW3(val);codret=1;}
	if (!strcmp(nmmod, "SW") || all)
	{  Ysetstate_SW(val);codret=1;}
	if (!strcmp(nmmod, "QS") || all)
	{  Ysetstate_QS(val);codret=1;}
	return(codret);
}
void Ysetwish_mod (int imod, YREAL val) 
{	if(1==0);
	else if (imod==4) Ysetwish_FC(val);
	else if (imod==48) Ysetwish_QS(val);
}
void  Yio_mod (char *nmmod, int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)
{
	 if(1==0);
	 else if (strcmp(nmmod, "TC") == 0) Yio_TC(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "degd") == 0) Yio_degd(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "HL1") == 0) Yio_HL1(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "AUFT") == 0) Yio_AUFT(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "FC") == 0) Yio_FC(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "BE") == 0) Yio_BE(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "CEF") == 0) Yio_CEF(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "PWP") == 0) Yio_PWP(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "K1") == 0) Yio_K1(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "K2") == 0) Yio_K2(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "K3") == 0) Yio_K3(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "ALPHA") == 0) Yio_ALPHA(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "PER1") == 0) Yio_PER1(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "PER2") == 0) Yio_PER2(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "PE") == 0) Yio_PE(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "TT") == 0) Yio_TT(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "TM") == 0) Yio_TM(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "ETPM") == 0) Yio_ETPM(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "Snow") == 0) Yio_Snow(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "AUFTHL11") == 0) Yio_AUFTHL11(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "AUFTHL12") == 0) Yio_AUFTHL12(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "Soil1") == 0) Yio_Soil1(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "Soil2") == 0) Yio_Soil2(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "Soil3") == 0) Yio_Soil3(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "Soil4") == 0) Yio_Soil4(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "ETP") == 0) Yio_ETP(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "ETR1") == 0) Yio_ETR1(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "ETR2") == 0) Yio_ETR2(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "ETR3") == 0) Yio_ETR3(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "ETR4") == 0) Yio_ETR4(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "R11") == 0) Yio_R11(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "R12") == 0) Yio_R12(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "R13") == 0) Yio_R13(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "R14") == 0) Yio_R14(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "R15") == 0) Yio_R15(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "R21") == 0) Yio_R21(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "R22") == 0) Yio_R22(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "R23") == 0) Yio_R23(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "R3") == 0) Yio_R3(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "QTOT") == 0) Yio_QTOT(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "MAXBAS") == 0) Yio_MAXBAS(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "Q1") == 0) Yio_Q1(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "Q2") == 0) Yio_Q2(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "Q3") == 0) Yio_Q3(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "STW1") == 0) Yio_STW1(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "STW2") == 0) Yio_STW2(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "STW3") == 0) Yio_STW3(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "SW") == 0) Yio_SW(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "QS") == 0) Yio_QS(Yws, Yw1, Yw2, Yw3, Ywt, val);
}
void YgradCTOtab_target (YREAL tab[]) 
{	//Y3windice = 0;
	 YgradCTOtab_FC (tab);
}
void YtabTOgrad_target (YREAL tab[]) 
{	//Y3windice = 0;
	 YtabTOgrad_FC (tab);
}
void Y3getstate_all (float x[]) 
{	 Y3windice = 0;
	 Y3getstate_FC (x);
}
void Y3valstate_all () 
{	 Y3windice = 0;
	 Y3valstate_FC ();
}
void Y3valgrad_all (float g[]) 
{	 Y3windice = 0;
	 Y3valgrad_FC (g);
}
void Y3valxinf_all () 
{	 Y3windice = 0;
	 Y3valxinf_FC ();
}
void Y3valxsup_all () 
{	 Y3windice = 0;
	 Y3valxsup_FC ();
}
void Y3valdxmin_all () 
{	 Y3windice = 0;
	 Y3valdxmin_FC ();
}
void Y3getdelta_all (float x[]) 
{	 Y3windice = 0;
	 Y3getdelta_FC (x);
}
void Y3valdelta_all () 
{	 Y3windice = 0;
	 Y3valdelta_FC ();
}
void YdeltaEQPCstate_traj(int itraj, char *norkmod, int frompdt, int topdt) 
{
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
		if ( !strcmp(norkmod, "TC") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_TC (0, 1, YTabMod[Yid_TC].pcoef);
		if ( !strcmp(norkmod, "degd") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_degd (0, 1, YTabMod[Yid_degd].pcoef);
		if ( !strcmp(norkmod, "HL1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_HL1 (0, 1, YTabMod[Yid_HL1].pcoef);
		if ( !strcmp(norkmod, "AUFT") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_AUFT (0, 1, YTabMod[Yid_AUFT].pcoef);
		if ( !strcmp(norkmod, "FC") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YdeltaEQPstate_FC (0, 1, YTabMod[Yid_FC].pcoef);
		if ( !strcmp(norkmod, "BE") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_BE (0, 1, YTabMod[Yid_BE].pcoef);
		if ( !strcmp(norkmod, "CEF") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_CEF (0, 1, YTabMod[Yid_CEF].pcoef);
		if ( !strcmp(norkmod, "PWP") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_PWP (0, 1, YTabMod[Yid_PWP].pcoef);
		if ( !strcmp(norkmod, "K1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_K1 (0, 1, YTabMod[Yid_K1].pcoef);
		if ( !strcmp(norkmod, "K2") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_K2 (0, 1, YTabMod[Yid_K2].pcoef);
		if ( !strcmp(norkmod, "K3") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_K3 (0, 1, YTabMod[Yid_K3].pcoef);
		if ( !strcmp(norkmod, "ALPHA") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_ALPHA (0, 1, YTabMod[Yid_ALPHA].pcoef);
		if ( !strcmp(norkmod, "PER1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_PER1 (0, 1, YTabMod[Yid_PER1].pcoef);
		if ( !strcmp(norkmod, "PER2") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_PER2 (0, 1, YTabMod[Yid_PER2].pcoef);
	}
	else if (itraj==Yid_Tm)
	{
		if ( !strcmp(norkmod, "PE") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_PE (frompdt, topdt, YTabMod[Yid_PE].pcoef);
		if ( !strcmp(norkmod, "TT") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_TT (frompdt, topdt, YTabMod[Yid_TT].pcoef);
		if ( !strcmp(norkmod, "TM") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_TM (frompdt, topdt, YTabMod[Yid_TM].pcoef);
		if ( !strcmp(norkmod, "ETPM") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_ETPM (frompdt, topdt, YTabMod[Yid_ETPM].pcoef);
		if ( !strcmp(norkmod, "Snow") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Snow (frompdt, topdt, YTabMod[Yid_Snow].pcoef);
		if ( !strcmp(norkmod, "AUFTHL11") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_AUFTHL11 (frompdt, topdt, YTabMod[Yid_AUFTHL11].pcoef);
		if ( !strcmp(norkmod, "AUFTHL12") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_AUFTHL12 (frompdt, topdt, YTabMod[Yid_AUFTHL12].pcoef);
		if ( !strcmp(norkmod, "Soil1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Soil1 (frompdt, topdt, YTabMod[Yid_Soil1].pcoef);
		if ( !strcmp(norkmod, "Soil2") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Soil2 (frompdt, topdt, YTabMod[Yid_Soil2].pcoef);
		if ( !strcmp(norkmod, "Soil3") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Soil3 (frompdt, topdt, YTabMod[Yid_Soil3].pcoef);
		if ( !strcmp(norkmod, "Soil4") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Soil4 (frompdt, topdt, YTabMod[Yid_Soil4].pcoef);
		if ( !strcmp(norkmod, "ETP") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_ETP (frompdt, topdt, YTabMod[Yid_ETP].pcoef);
		if ( !strcmp(norkmod, "ETR1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_ETR1 (frompdt, topdt, YTabMod[Yid_ETR1].pcoef);
		if ( !strcmp(norkmod, "ETR2") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_ETR2 (frompdt, topdt, YTabMod[Yid_ETR2].pcoef);
		if ( !strcmp(norkmod, "ETR3") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_ETR3 (frompdt, topdt, YTabMod[Yid_ETR3].pcoef);
		if ( !strcmp(norkmod, "ETR4") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_ETR4 (frompdt, topdt, YTabMod[Yid_ETR4].pcoef);
		if ( !strcmp(norkmod, "R11") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R11 (frompdt, topdt, YTabMod[Yid_R11].pcoef);
		if ( !strcmp(norkmod, "R12") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R12 (frompdt, topdt, YTabMod[Yid_R12].pcoef);
		if ( !strcmp(norkmod, "R13") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R13 (frompdt, topdt, YTabMod[Yid_R13].pcoef);
		if ( !strcmp(norkmod, "R14") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R14 (frompdt, topdt, YTabMod[Yid_R14].pcoef);
		if ( !strcmp(norkmod, "R15") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R15 (frompdt, topdt, YTabMod[Yid_R15].pcoef);
		if ( !strcmp(norkmod, "R21") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R21 (frompdt, topdt, YTabMod[Yid_R21].pcoef);
		if ( !strcmp(norkmod, "R22") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R22 (frompdt, topdt, YTabMod[Yid_R22].pcoef);
		if ( !strcmp(norkmod, "R23") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R23 (frompdt, topdt, YTabMod[Yid_R23].pcoef);
		if ( !strcmp(norkmod, "R3") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R3 (frompdt, topdt, YTabMod[Yid_R3].pcoef);
		if ( !strcmp(norkmod, "QTOT") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_QTOT (frompdt, topdt, YTabMod[Yid_QTOT].pcoef);
		if ( !strcmp(norkmod, "MAXBAS") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_MAXBAS (frompdt, topdt, YTabMod[Yid_MAXBAS].pcoef);
		if ( !strcmp(norkmod, "Q1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Q1 (frompdt, topdt, YTabMod[Yid_Q1].pcoef);
		if ( !strcmp(norkmod, "Q2") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Q2 (frompdt, topdt, YTabMod[Yid_Q2].pcoef);
		if ( !strcmp(norkmod, "Q3") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Q3 (frompdt, topdt, YTabMod[Yid_Q3].pcoef);
		if ( !strcmp(norkmod, "STW1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_STW1 (frompdt, topdt, YTabMod[Yid_STW1].pcoef);
		if ( !strcmp(norkmod, "STW2") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_STW2 (frompdt, topdt, YTabMod[Yid_STW2].pcoef);
		if ( !strcmp(norkmod, "STW3") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_STW3 (frompdt, topdt, YTabMod[Yid_STW3].pcoef);
		if ( !strcmp(norkmod, "SW") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_SW (frompdt, topdt, YTabMod[Yid_SW].pcoef);
		if ( !strcmp(norkmod, "QS") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#C") )
	 YdeltaEQPstate_QS (frompdt, topdt, YTabMod[Yid_QS].pcoef);
	}
}
void YdeltaEQPCstate_target() 
{
	 YdeltaEQPstate_FC (0, 1, YTabMod[Yid_FC].pcoef);
}
void YgradEQPdelta_traj(int itraj, char *norkmod, int frompdt, int topdt, double pfact) 
{
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
		if ( !strcmp(norkmod, "TC") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_TC (0, 1, pfact);
		if ( !strcmp(norkmod, "degd") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_degd (0, 1, pfact);
		if ( !strcmp(norkmod, "HL1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_HL1 (0, 1, pfact);
		if ( !strcmp(norkmod, "AUFT") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_AUFT (0, 1, pfact);
		if ( !strcmp(norkmod, "FC") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YgradEQPdelta_FC (0, 1, pfact);
		if ( !strcmp(norkmod, "BE") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_BE (0, 1, pfact);
		if ( !strcmp(norkmod, "CEF") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_CEF (0, 1, pfact);
		if ( !strcmp(norkmod, "PWP") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_PWP (0, 1, pfact);
		if ( !strcmp(norkmod, "K1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_K1 (0, 1, pfact);
		if ( !strcmp(norkmod, "K2") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_K2 (0, 1, pfact);
		if ( !strcmp(norkmod, "K3") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_K3 (0, 1, pfact);
		if ( !strcmp(norkmod, "ALPHA") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_ALPHA (0, 1, pfact);
		if ( !strcmp(norkmod, "PER1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_PER1 (0, 1, pfact);
		if ( !strcmp(norkmod, "PER2") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_PER2 (0, 1, pfact);
	}
	else if (itraj==Yid_Tm)
	{
		if ( !strcmp(norkmod, "PE") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_PE (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "TT") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_TT (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "TM") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_TM (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETPM") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_ETPM (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Snow") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_Snow (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "AUFTHL11") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_AUFTHL11 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "AUFTHL12") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_AUFTHL12 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Soil1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_Soil1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Soil2") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_Soil2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Soil3") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_Soil3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Soil4") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_Soil4 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETP") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_ETP (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETR1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_ETR1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETR2") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_ETR2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETR3") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_ETR3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETR4") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_ETR4 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R11") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_R11 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R12") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_R12 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R13") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_R13 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R14") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_R14 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R15") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_R15 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R21") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_R21 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R22") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_R22 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R23") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_R23 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R3") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_R3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QTOT") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_QTOT (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MAXBAS") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_MAXBAS (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_Q1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q2") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_Q2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q3") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_Q3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "STW1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_STW1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "STW2") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_STW2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "STW3") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_STW3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "SW") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_SW (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QS") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#C") )
	 YgradEQPdelta_QS (frompdt, topdt, pfact);
	}
}
void YgradEQPdelta_target(double pfact) 
{
	 YgradEQPdelta_FC (0, 1, pfact);
}
void YgradEQval_traj(int itraj, char *norkmod, int frompdt, int topdt, double val) 
{
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
		if ( !strcmp(norkmod, "TC") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_TC (val);
		if ( !strcmp(norkmod, "degd") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_degd (val);
		if ( !strcmp(norkmod, "HL1") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_HL1 (val);
		if ( !strcmp(norkmod, "AUFT") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_AUFT (val);
		if ( !strcmp(norkmod, "FC") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
		 YgradEQval_FC (val);
		if ( !strcmp(norkmod, "BE") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_BE (val);
		if ( !strcmp(norkmod, "CEF") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_CEF (val);
		if ( !strcmp(norkmod, "PWP") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_PWP (val);
		if ( !strcmp(norkmod, "K1") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_K1 (val);
		if ( !strcmp(norkmod, "K2") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_K2 (val);
		if ( !strcmp(norkmod, "K3") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_K3 (val);
		if ( !strcmp(norkmod, "ALPHA") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_ALPHA (val);
		if ( !strcmp(norkmod, "PER1") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_PER1 (val);
		if ( !strcmp(norkmod, "PER2") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_PER2 (val);
	}
	else if (itraj==Yid_Tm)
	{
		if ( !strcmp(norkmod, "PE") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_PE (frompdt, topdt, val);
		if ( !strcmp(norkmod, "TT") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_TT (frompdt, topdt, val);
		if ( !strcmp(norkmod, "TM") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_TM (frompdt, topdt, val);
		if ( !strcmp(norkmod, "ETPM") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_ETPM (frompdt, topdt, val);
		if ( !strcmp(norkmod, "Snow") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_Snow (frompdt, topdt, val);
		if ( !strcmp(norkmod, "AUFTHL11") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_AUFTHL11 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "AUFTHL12") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_AUFTHL12 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "Soil1") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_Soil1 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "Soil2") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_Soil2 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "Soil3") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_Soil3 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "Soil4") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_Soil4 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "ETP") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_ETP (frompdt, topdt, val);
		if ( !strcmp(norkmod, "ETR1") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_ETR1 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "ETR2") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_ETR2 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "ETR3") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_ETR3 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "ETR4") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_ETR4 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "R11") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_R11 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "R12") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_R12 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "R13") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_R13 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "R14") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_R14 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "R15") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_R15 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "R21") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_R21 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "R22") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_R22 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "R23") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_R23 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "R3") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_R3 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "QTOT") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_QTOT (frompdt, topdt, val);
		if ( !strcmp(norkmod, "MAXBAS") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_MAXBAS (frompdt, topdt, val);
		if ( !strcmp(norkmod, "Q1") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_Q1 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "Q2") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_Q2 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "Q3") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_Q3 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "STW1") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_STW1 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "STW2") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_STW2 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "STW3") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_STW3 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "SW") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_SW (frompdt, topdt, val);
		if ( !strcmp(norkmod, "QS") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#C") )
		 YgradEQval_QS (frompdt, topdt, val);
	}
}
void YdeltaEQPstate_traj(int itraj, char *norkmod, int frompdt, int topdt, double pfact) 
{
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
		if ( !strcmp(norkmod, "TC") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_TC (0, 1, pfact);
		if ( !strcmp(norkmod, "degd") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_degd (0, 1, pfact);
		if ( !strcmp(norkmod, "HL1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_HL1 (0, 1, pfact);
		if ( !strcmp(norkmod, "AUFT") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_AUFT (0, 1, pfact);
		if ( !strcmp(norkmod, "FC") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YdeltaEQPstate_FC (0, 1, pfact);
		if ( !strcmp(norkmod, "BE") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_BE (0, 1, pfact);
		if ( !strcmp(norkmod, "CEF") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_CEF (0, 1, pfact);
		if ( !strcmp(norkmod, "PWP") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_PWP (0, 1, pfact);
		if ( !strcmp(norkmod, "K1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_K1 (0, 1, pfact);
		if ( !strcmp(norkmod, "K2") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_K2 (0, 1, pfact);
		if ( !strcmp(norkmod, "K3") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_K3 (0, 1, pfact);
		if ( !strcmp(norkmod, "ALPHA") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_ALPHA (0, 1, pfact);
		if ( !strcmp(norkmod, "PER1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_PER1 (0, 1, pfact);
		if ( !strcmp(norkmod, "PER2") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_PER2 (0, 1, pfact);
	}
	else if (itraj==Yid_Tm)
	{
		if ( !strcmp(norkmod, "PE") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_PE (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "TT") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_TT (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "TM") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_TM (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETPM") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_ETPM (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Snow") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Snow (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "AUFTHL11") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_AUFTHL11 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "AUFTHL12") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_AUFTHL12 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Soil1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Soil1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Soil2") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Soil2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Soil3") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Soil3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Soil4") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Soil4 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETP") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_ETP (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETR1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_ETR1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETR2") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_ETR2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETR3") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_ETR3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETR4") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_ETR4 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R11") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R11 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R12") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R12 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R13") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R13 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R14") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R14 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R15") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R15 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R21") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R21 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R22") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R22 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R23") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R23 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R3") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QTOT") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_QTOT (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MAXBAS") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_MAXBAS (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Q1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q2") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Q2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q3") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Q3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "STW1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_STW1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "STW2") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_STW2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "STW3") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_STW3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "SW") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_SW (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QS") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#C") )
	 YdeltaEQPstate_QS (frompdt, topdt, pfact);
	}
}
void YdeltaEQPstate_target(double pfact) 
{
	 YdeltaEQPstate_FC (0, 1, pfact);
}
void YdeltaEQPgrad_target(double pfact) 
{
	 YdeltaEQPgrad_FC (0, 1, pfact);
}
void YstateEQPdelta_traj(int itraj, char *norkmod, int frompdt, int topdt, double pfact) 
{
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
		if ( !strcmp(norkmod, "TC") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_TC (0, 1, pfact);
		if ( !strcmp(norkmod, "degd") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_degd (0, 1, pfact);
		if ( !strcmp(norkmod, "HL1") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_HL1 (0, 1, pfact);
		if ( !strcmp(norkmod, "AUFT") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_AUFT (0, 1, pfact);
		if ( !strcmp(norkmod, "FC") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YstateEQPdelta_FC (0, 1, pfact);
		if ( !strcmp(norkmod, "BE") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_BE (0, 1, pfact);
		if ( !strcmp(norkmod, "CEF") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_CEF (0, 1, pfact);
		if ( !strcmp(norkmod, "PWP") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_PWP (0, 1, pfact);
		if ( !strcmp(norkmod, "K1") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_K1 (0, 1, pfact);
		if ( !strcmp(norkmod, "K2") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_K2 (0, 1, pfact);
		if ( !strcmp(norkmod, "K3") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_K3 (0, 1, pfact);
		if ( !strcmp(norkmod, "ALPHA") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_ALPHA (0, 1, pfact);
		if ( !strcmp(norkmod, "PER1") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_PER1 (0, 1, pfact);
		if ( !strcmp(norkmod, "PER2") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_PER2 (0, 1, pfact);
	}
	else if (itraj==Yid_Tm)
	{
		if ( !strcmp(norkmod, "PE") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_PE (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "TT") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_TT (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "TM") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_TM (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETPM") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_ETPM (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Snow") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_Snow (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "AUFTHL11") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_AUFTHL11 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "AUFTHL12") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_AUFTHL12 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Soil1") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_Soil1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Soil2") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_Soil2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Soil3") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_Soil3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Soil4") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_Soil4 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETP") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_ETP (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETR1") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_ETR1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETR2") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_ETR2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETR3") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_ETR3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETR4") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_ETR4 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R11") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_R11 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R12") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_R12 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R13") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_R13 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R14") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_R14 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R15") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_R15 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R21") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_R21 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R22") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_R22 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R23") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_R23 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R3") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_R3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QTOT") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_QTOT (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MAXBAS") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_MAXBAS (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q1") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_Q1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q2") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_Q2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q3") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_Q3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "STW1") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_STW1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "STW2") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_STW2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "STW3") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_STW3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "SW") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_SW (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QS") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#C") )
	 YstateEQPdelta_QS (frompdt, topdt, pfact);
	}
}
void YstateEQPdelta_target(double pfact) 
{
	 YstateEQPdelta_FC (0, 1, pfact);
}
void YstateEQPOdelta_target(double pfact, char *codop) 
{
	 YstateEQPOdelta_FC (0, 1, pfact, codop);
}
void YstateEQAPTdelta_target(double pfact, YREAL tab[]) 
{
	 YstateEQAPTdelta_FC (0, 1, pfact, tab);
}
void YgradEQPstate_traj(int itraj, char *norkmod, int frompdt, int topdt, double pfact) 
{
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
		if ( !strcmp(norkmod, "TC") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_TC(pfact);
		if ( !strcmp(norkmod, "degd") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_degd(pfact);
		if ( !strcmp(norkmod, "HL1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_HL1(pfact);
		if ( !strcmp(norkmod, "AUFT") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_AUFT(pfact);
		if ( !strcmp(norkmod, "FC") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YgradEQPstate_FC(pfact);
		if ( !strcmp(norkmod, "BE") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_BE(pfact);
		if ( !strcmp(norkmod, "CEF") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_CEF(pfact);
		if ( !strcmp(norkmod, "PWP") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_PWP(pfact);
		if ( !strcmp(norkmod, "K1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_K1(pfact);
		if ( !strcmp(norkmod, "K2") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_K2(pfact);
		if ( !strcmp(norkmod, "K3") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_K3(pfact);
		if ( !strcmp(norkmod, "ALPHA") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_ALPHA(pfact);
		if ( !strcmp(norkmod, "PER1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_PER1(pfact);
		if ( !strcmp(norkmod, "PER2") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_PER2(pfact);
	}
	else if (itraj==Yid_Tm)
	{
		if ( !strcmp(norkmod, "PE") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_PE (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "TT") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_TT (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "TM") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_TM (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETPM") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_ETPM (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Snow") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_Snow (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "AUFTHL11") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_AUFTHL11 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "AUFTHL12") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_AUFTHL12 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Soil1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_Soil1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Soil2") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_Soil2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Soil3") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_Soil3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Soil4") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_Soil4 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETP") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_ETP (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETR1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_ETR1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETR2") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_ETR2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETR3") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_ETR3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ETR4") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_ETR4 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R11") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_R11 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R12") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_R12 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R13") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_R13 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R14") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_R14 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R15") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_R15 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R21") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_R21 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R22") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_R22 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R23") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_R23 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R3") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_R3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QTOT") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_QTOT (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MAXBAS") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_MAXBAS (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_Q1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q2") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_Q2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q3") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_Q3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "STW1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_STW1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "STW2") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_STW2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "STW3") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_STW3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "SW") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_SW (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QS") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#C") )
	 YgradEQPstate_QS (frompdt, topdt, pfact);
	}
}
void YgradEQPstate_target(double pfact) 
{
	 YgradEQPstate_FC (pfact);
}
void YgradEQPOstate_target(double pfact, char *codop) 
{
	 YgradEQPOstate_FC (pfact, codop);
}
void YstateTOtab_traj (int itraj, char *norkmod, int frompdt, int topdt, YREAL tab[]) 
{	//Y3windice = 0;
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
		if ( !strcmp(norkmod, "TC") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_TC (tab);
		if ( !strcmp(norkmod, "degd") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_degd (tab);
		if ( !strcmp(norkmod, "HL1") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_HL1 (tab);
		if ( !strcmp(norkmod, "AUFT") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_AUFT (tab);
		if ( !strcmp(norkmod, "FC") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YstateTOtab_FC (tab);
		if ( !strcmp(norkmod, "BE") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_BE (tab);
		if ( !strcmp(norkmod, "CEF") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_CEF (tab);
		if ( !strcmp(norkmod, "PWP") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_PWP (tab);
		if ( !strcmp(norkmod, "K1") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_K1 (tab);
		if ( !strcmp(norkmod, "K2") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_K2 (tab);
		if ( !strcmp(norkmod, "K3") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_K3 (tab);
		if ( !strcmp(norkmod, "ALPHA") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_ALPHA (tab);
		if ( !strcmp(norkmod, "PER1") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_PER1 (tab);
		if ( !strcmp(norkmod, "PER2") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_PER2 (tab);
	}
	else if (itraj==Yid_Tm)
	{
		if ( !strcmp(norkmod, "PE") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_PE (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "TT") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_TT (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "TM") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_TM (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ETPM") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_ETPM (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Snow") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_Snow (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "AUFTHL11") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_AUFTHL11 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "AUFTHL12") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_AUFTHL12 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Soil1") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_Soil1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Soil2") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_Soil2 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Soil3") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_Soil3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Soil4") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_Soil4 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ETP") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_ETP (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ETR1") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_ETR1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ETR2") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_ETR2 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ETR3") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_ETR3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ETR4") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_ETR4 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R11") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_R11 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R12") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_R12 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R13") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_R13 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R14") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_R14 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R15") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_R15 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R21") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_R21 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R22") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_R22 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R23") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_R23 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R3") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_R3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "QTOT") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_QTOT (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "MAXBAS") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_MAXBAS (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Q1") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_Q1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Q2") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_Q2 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Q3") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_Q3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "STW1") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_STW1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "STW2") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_STW2 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "STW3") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_STW3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "SW") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_SW (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "QS") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#C") )
	 YstateTOtab_QS (frompdt, topdt, tab);
	}
}
void YstateTOtab_target (YREAL tab[]) 
{	//Y3windice = 0;
	 YstateTOtab_FC (tab);
}
void YgradTOtab_traj (int itraj, char *norkmod, int frompdt, int topdt, YREAL tab[]) 
{	//Y3windice = 0;
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
		if ( !strcmp(norkmod, "TC") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_TC (tab);
		if ( !strcmp(norkmod, "degd") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_degd (tab);
		if ( !strcmp(norkmod, "HL1") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_HL1 (tab);
		if ( !strcmp(norkmod, "AUFT") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_AUFT (tab);
		if ( !strcmp(norkmod, "FC") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YgradTOtab_FC (tab);
		if ( !strcmp(norkmod, "BE") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_BE (tab);
		if ( !strcmp(norkmod, "CEF") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_CEF (tab);
		if ( !strcmp(norkmod, "PWP") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_PWP (tab);
		if ( !strcmp(norkmod, "K1") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_K1 (tab);
		if ( !strcmp(norkmod, "K2") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_K2 (tab);
		if ( !strcmp(norkmod, "K3") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_K3 (tab);
		if ( !strcmp(norkmod, "ALPHA") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_ALPHA (tab);
		if ( !strcmp(norkmod, "PER1") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_PER1 (tab);
		if ( !strcmp(norkmod, "PER2") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_PER2 (tab);
	}
	else if (itraj==Yid_Tm)
	{
		if ( !strcmp(norkmod, "PE") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_PE (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "TT") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_TT (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "TM") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_TM (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ETPM") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_ETPM (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Snow") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_Snow (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "AUFTHL11") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_AUFTHL11 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "AUFTHL12") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_AUFTHL12 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Soil1") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_Soil1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Soil2") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_Soil2 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Soil3") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_Soil3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Soil4") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_Soil4 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ETP") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_ETP (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ETR1") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_ETR1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ETR2") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_ETR2 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ETR3") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_ETR3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ETR4") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_ETR4 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R11") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_R11 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R12") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_R12 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R13") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_R13 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R14") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_R14 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R15") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_R15 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R21") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_R21 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R22") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_R22 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R23") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_R23 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R3") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_R3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "QTOT") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_QTOT (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "MAXBAS") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_MAXBAS (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Q1") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_Q1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Q2") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_Q2 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Q3") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_Q3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "STW1") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_STW1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "STW2") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_STW2 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "STW3") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_STW3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "SW") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_SW (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "QS") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#C") )
	 YgradTOtab_QS (frompdt, topdt, tab);
	}
}
void YgradTOtab_target (YREAL tab[]) 
{	//Y3windice = 0;
	 YgradTOtab_FC (tab);
}
void YtabTOgrad_traj (int itraj, char *norkmod, int frompdt, int topdt, YREAL tab[]) 
{	//Y3windice = 0;
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
		if ( !strcmp(norkmod, "TC") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_TC (tab);
		if ( !strcmp(norkmod, "degd") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_degd (tab);
		if ( !strcmp(norkmod, "HL1") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_HL1 (tab);
		if ( !strcmp(norkmod, "AUFT") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_AUFT (tab);
		if ( !strcmp(norkmod, "FC") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
			 YtabTOgrad_FC (tab);
		if ( !strcmp(norkmod, "BE") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_BE (tab);
		if ( !strcmp(norkmod, "CEF") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_CEF (tab);
		if ( !strcmp(norkmod, "PWP") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_PWP (tab);
		if ( !strcmp(norkmod, "K1") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_K1 (tab);
		if ( !strcmp(norkmod, "K2") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_K2 (tab);
		if ( !strcmp(norkmod, "K3") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_K3 (tab);
		if ( !strcmp(norkmod, "ALPHA") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_ALPHA (tab);
		if ( !strcmp(norkmod, "PER1") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_PER1 (tab);
		if ( !strcmp(norkmod, "PER2") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_PER2 (tab);
	}
	else if (itraj==Yid_Tm)
	{
		if ( !strcmp(norkmod, "PE") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_PE (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "TT") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_TT (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "TM") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_TM (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ETPM") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_ETPM (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Snow") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_Snow (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "AUFTHL11") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_AUFTHL11 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "AUFTHL12") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_AUFTHL12 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Soil1") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_Soil1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Soil2") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_Soil2 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Soil3") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_Soil3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Soil4") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_Soil4 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ETP") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_ETP (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ETR1") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_ETR1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ETR2") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_ETR2 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ETR3") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_ETR3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ETR4") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_ETR4 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R11") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_R11 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R12") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_R12 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R13") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_R13 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R14") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_R14 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R15") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_R15 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R21") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_R21 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R22") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_R22 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R23") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_R23 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R3") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_R3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "QTOT") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_QTOT (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "MAXBAS") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_MAXBAS (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Q1") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_Q1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Q2") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_Q2 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Q3") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_Q3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "STW1") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_STW1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "STW2") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_STW2 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "STW3") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_STW3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "SW") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_SW (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "QS") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#C") )
			 YtabTOgrad_QS (frompdt, topdt, tab);
	}
}
 int Ydfward_all(int modop, char *nmmod, int All, int KeKo,  float pdx, float ptol)
{
	int nbko=0;
	if ( !strcmp(nmmod, "Snow") || All )
		nbko += Ytestdf_Snow(modop,KeKo,pdx,ptol,YNBI_Snow,YNBS_Snow,"Snow",Yting,YSnow[Yi]->Ystate[0],YSnow[Yi]);
	if ( !strcmp(nmmod, "AUFTHL11") || All )
		nbko += Ytestdf_AUFTHL11(modop,KeKo,pdx,ptol,YNBI_AUFTHL11,YNBS_AUFTHL11,"AUFTHL11",Yting,YAUFTHL11[Yi]->Ystate[0],YAUFTHL11[Yi]);
	if ( !strcmp(nmmod, "AUFTHL12") || All )
		nbko += Ytestdf_AUFTHL12(modop,KeKo,pdx,ptol,YNBI_AUFTHL12,YNBS_AUFTHL12,"AUFTHL12",Yting,YAUFTHL12[Yi]->Ystate[0],YAUFTHL12[Yi]);
	if ( !strcmp(nmmod, "Soil1") || All )
		nbko += Ytestdf_Soil1(modop,KeKo,pdx,ptol,YNBI_Soil1,YNBS_Soil1,"Soil1",Yting,YSoil1[Yi]->Ystate[0],YSoil1[Yi]);
	if ( !strcmp(nmmod, "Soil2") || All )
		nbko += Ytestdf_Soil2(modop,KeKo,pdx,ptol,YNBI_Soil2,YNBS_Soil2,"Soil2",Yting,YSoil2[Yi]->Ystate[0],YSoil2[Yi]);
	if ( !strcmp(nmmod, "Soil3") || All )
		nbko += Ytestdf_Soil3(modop,KeKo,pdx,ptol,YNBI_Soil3,YNBS_Soil3,"Soil3",Yting,YSoil3[Yi]->Ystate[0],YSoil3[Yi]);
	if ( !strcmp(nmmod, "Soil4") || All )
		nbko += Ytestdf_Soil4(modop,KeKo,pdx,ptol,YNBI_Soil4,YNBS_Soil4,"Soil4",Yting,YSoil4[Yi]->Ystate[0],YSoil4[Yi]);
	if ( !strcmp(nmmod, "ETP") || All )
		nbko += Ytestdf_ETP(modop,KeKo,pdx,ptol,YNBI_ETP,YNBS_ETP,"ETP",Yting,YETP[Yi]->Ystate[0],YETP[Yi]);
	if ( !strcmp(nmmod, "ETR1") || All )
		nbko += Ytestdf_ETR1(modop,KeKo,pdx,ptol,YNBI_ETR1,YNBS_ETR1,"ETR1",Yting,YETR1[Yi]->Ystate[0],YETR1[Yi]);
	if ( !strcmp(nmmod, "ETR2") || All )
		nbko += Ytestdf_ETR2(modop,KeKo,pdx,ptol,YNBI_ETR2,YNBS_ETR2,"ETR2",Yting,YETR2[Yi]->Ystate[0],YETR2[Yi]);
	if ( !strcmp(nmmod, "ETR3") || All )
		nbko += Ytestdf_ETR3(modop,KeKo,pdx,ptol,YNBI_ETR3,YNBS_ETR3,"ETR3",Yting,YETR3[Yi]->Ystate[0],YETR3[Yi]);
	if ( !strcmp(nmmod, "ETR4") || All )
		nbko += Ytestdf_ETR4(modop,KeKo,pdx,ptol,YNBI_ETR4,YNBS_ETR4,"ETR4",Yting,YETR4[Yi]->Ystate[0],YETR4[Yi]);
	if ( !strcmp(nmmod, "R11") || All )
		nbko += Ytestdf_R11(modop,KeKo,pdx,ptol,YNBI_R11,YNBS_R11,"R11",Yting,YR11[Yi]->Ystate[0],YR11[Yi]);
	if ( !strcmp(nmmod, "R12") || All )
		nbko += Ytestdf_R12(modop,KeKo,pdx,ptol,YNBI_R12,YNBS_R12,"R12",Yting,YR12[Yi]->Ystate[0],YR12[Yi]);
	if ( !strcmp(nmmod, "R13") || All )
		nbko += Ytestdf_R13(modop,KeKo,pdx,ptol,YNBI_R13,YNBS_R13,"R13",Yting,YR13[Yi]->Ystate[0],YR13[Yi]);
	if ( !strcmp(nmmod, "R14") || All )
		nbko += Ytestdf_R14(modop,KeKo,pdx,ptol,YNBI_R14,YNBS_R14,"R14",Yting,YR14[Yi]->Ystate[0],YR14[Yi]);
	if ( !strcmp(nmmod, "R15") || All )
		nbko += Ytestdf_R15(modop,KeKo,pdx,ptol,YNBI_R15,YNBS_R15,"R15",Yting,YR15[Yi]->Ystate[0],YR15[Yi]);
	if ( !strcmp(nmmod, "R21") || All )
		nbko += Ytestdf_R21(modop,KeKo,pdx,ptol,YNBI_R21,YNBS_R21,"R21",Yting,YR21[Yi]->Ystate[0],YR21[Yi]);
	if ( !strcmp(nmmod, "R22") || All )
		nbko += Ytestdf_R22(modop,KeKo,pdx,ptol,YNBI_R22,YNBS_R22,"R22",Yting,YR22[Yi]->Ystate[0],YR22[Yi]);
	if ( !strcmp(nmmod, "R23") || All )
		nbko += Ytestdf_R23(modop,KeKo,pdx,ptol,YNBI_R23,YNBS_R23,"R23",Yting,YR23[Yi]->Ystate[0],YR23[Yi]);
	if ( !strcmp(nmmod, "R3") || All )
		nbko += Ytestdf_R3(modop,KeKo,pdx,ptol,YNBI_R3,YNBS_R3,"R3",Yting,YR3[Yi]->Ystate[0],YR3[Yi]);
	if ( !strcmp(nmmod, "QTOT") || All )
		nbko += Ytestdf_QTOT(modop,KeKo,pdx,ptol,YNBI_QTOT,YNBS_QTOT,"QTOT",Yting,YQTOT[Yi]->Ystate[0],YQTOT[Yi]);
	if ( !strcmp(nmmod, "MAXBAS") || All )
		nbko += Ytestdf_MAXBAS(modop,KeKo,pdx,ptol,YNBI_MAXBAS,YNBS_MAXBAS,"MAXBAS",Yting,YMAXBAS[Yi]->Ystate[0],YMAXBAS[Yi]);
	if ( !strcmp(nmmod, "Q1") || All )
		nbko += Ytestdf_Q1(modop,KeKo,pdx,ptol,YNBI_Q1,YNBS_Q1,"Q1",Yting,YQ1[Yi]->Ystate[0],YQ1[Yi]);
	if ( !strcmp(nmmod, "Q2") || All )
		nbko += Ytestdf_Q2(modop,KeKo,pdx,ptol,YNBI_Q2,YNBS_Q2,"Q2",Yting,YQ2[Yi]->Ystate[0],YQ2[Yi]);
	if ( !strcmp(nmmod, "Q3") || All )
		nbko += Ytestdf_Q3(modop,KeKo,pdx,ptol,YNBI_Q3,YNBS_Q3,"Q3",Yting,YQ3[Yi]->Ystate[0],YQ3[Yi]);
	if ( !strcmp(nmmod, "STW1") || All )
		nbko += Ytestdf_STW1(modop,KeKo,pdx,ptol,YNBI_STW1,YNBS_STW1,"STW1",Yting,YSTW1[Yi]->Ystate[0],YSTW1[Yi]);
	if ( !strcmp(nmmod, "STW2") || All )
		nbko += Ytestdf_STW2(modop,KeKo,pdx,ptol,YNBI_STW2,YNBS_STW2,"STW2",Yting,YSTW2[Yi]->Ystate[0],YSTW2[Yi]);
	if ( !strcmp(nmmod, "STW3") || All )
		nbko += Ytestdf_STW3(modop,KeKo,pdx,ptol,YNBI_STW3,YNBS_STW3,"STW3",Yting,YSTW3[Yi]->Ystate[0],YSTW3[Yi]);
	if ( !strcmp(nmmod, "SW") || All )
		nbko += Ytestdf_SW(modop,KeKo,pdx,ptol,YNBI_SW,YNBS_SW,"SW",Yting,YSW[Yi]->Ystate[0],YSW[Yi]);
	if ( !strcmp(nmmod, "QS") || All )
		nbko += Ytestdf_QS(modop,KeKo,pdx,ptol,YNBI_QS,YNBS_QS,"QS",Yting,YQS[Yi]->Ystate[0],YQS[Yi]);
	return(nbko);
}

void YwishEQPstate_traj_tocov (int itraj, int pdt, double pfact) 
{
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
	}
	else if (itraj==Yid_Tm)
	{
	}
}
int Yauto_call (int argc, char *argv[]) 
{
	 int codret=0; int all=0; double val;
	 if (1==0);
	 else if ( !strcmp(argv[0], "setepsi") || !strcmp(argv[0], "SETEPSI") 
					 ||!strcmp(argv[0], "setepsi_all") || !strcmp(argv[0], "SETEPSI_ALL"))
	 {
			 if (!strcmp(argv[0], "setepsi_all") || !strcmp(argv[0], "SETEPSI_ALL")){all=1; val=atof(argv[1]);} else val=atof(argv[2]);
			 if (!strcmp(argv[1], "FC") || all)
					 {Ysetepsi_FC(val);codret=1;}
	 }
	 else codret=0;
	 return(codret);
}

 int Yforward_space_Sm()
{
	 YA1=1; YA2=0; YA3=0;
Yi=-1; Yj=-1; Yk=-1; /* init des indices de maille: maj par la boucle si valide*/
for(Yi=0; Yi<YA1_Sm; ++Yi)
{
	 Yting[0]=YS1_PE( Yi, YTemps);
	 Yting[1]=YS1_TT( Yi, YTemps);
	 Yting[2]=YS1_TC( Yi);
	 Yting[3]=YS1_degd( Yi);
	 Yting[4]=YS2_Snow( Yi, YTemps-1);
	 YSnow(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yting[0]=YS1_Snow( Yi, YTemps);
	 Yting[1]=YS1_HL1( Yi);
	 YAUFTHL11(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_AUFTHL11( Yi, YTemps);
	 Yting[1]=YS1_Snow( Yi, YTemps);
	 Yting[2]=YS1_AUFT( Yi);
	 YAUFTHL12(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_AUFTHL12( Yi, YTemps);
	 Yting[1]=YS1_SW( Yi, YTemps-1);
	 Yting[2]=YS1_FC( Yi);
	 Yting[3]=YS1_BE( Yi);
	 YSoil1(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yting[0]=YS1_Soil1( Yi, YTemps);
	 Yting[1]=YS1_AUFTHL12( Yi, YTemps);
	 Yting[2]=YS1_SW( Yi, YTemps-1);
	 YSoil2(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_Soil2( Yi, YTemps);
	 Yting[1]=YS1_FC( Yi);
	 YSoil3(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_Soil3( Yi, YTemps);
	 Yting[1]=YS1_Soil1( Yi, YTemps);
	 Yting[2]=YS1_Soil2( Yi, YTemps);
	 YSoil4(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_TT( Yi, YTemps);
	 Yting[1]=YS1_TM( Yi, YTemps);
	 Yting[2]=YS1_ETPM( Yi, YTemps);
	 Yting[3]=YS1_CEF( Yi);
	 YETP(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yting[0]=YS1_Soil4( Yi, YTemps);
	 Yting[1]=YS1_PWP( Yi);
	 YETR1(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_ETR1( Yi, YTemps);
	 Yting[1]=YS1_ETP( Yi, YTemps);
	 Yting[2]=YS1_Soil4( Yi, YTemps);
	 YETR2(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_ETR2( Yi, YTemps);
	 Yting[1]=YS1_Soil4( Yi, YTemps);
	 YETR3(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_ETR3( Yi, YTemps);
	 Yting[1]=YS1_ETR2( Yi, YTemps);
	 Yting[2]=YS1_Soil4( Yi, YTemps);
	 YETR4(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS2_ETR4( Yi, YTemps);
	 YSW(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_STW1( Yi, YTemps-1);
	 Yting[1]=YS2_Soil4( Yi, YTemps);
	 YR11(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R11( Yi, YTemps);
	 Yting[1]=YS1_K1( Yi);
	 Yting[2]=YS1_ALPHA( Yi);
	 YR12(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_R11( Yi, YTemps);
	 Yting[1]=YS1_R12( Yi, YTemps);
	 YR13(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R13( Yi, YTemps);
	 Yting[1]=YS1_R12( Yi, YTemps);
	 Yting[2]=YS1_STW1( Yi, YTemps-1);
	 Yting[3]=YS2_Soil4( Yi, YTemps);
	 YR14(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yting[0]=YS2_R14( Yi, YTemps);
	 YQ1(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_R14( Yi, YTemps);
	 Yting[1]=YS1_PER1( Yi);
	 YR15(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R15( Yi, YTemps);
	 YSTW1(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_STW2( Yi, YTemps-1);
	 Yting[1]=YS2_R15( Yi, YTemps);
	 Yting[2]=YS1_K2( Yi);
	 YR21(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS2_R21( Yi, YTemps);
	 YQ2(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_R21( Yi, YTemps);
	 Yting[1]=YS1_Q2( Yi, YTemps);
	 YR22(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R22( Yi, YTemps);
	 Yting[1]=YS1_PER2( Yi);
	 YR23(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R23( Yi, YTemps);
	 YSTW2(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_STW3( Yi, YTemps-1);
	 Yting[1]=YS2_R23( Yi, YTemps);
	 Yting[2]=YS1_K3( Yi);
	 YR3(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS2_R3( Yi, YTemps);
	 YQ3(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_R3( Yi, YTemps);
	 YSTW3(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_Q1( Yi, YTemps);
	 Yting[1]=YS1_Q2( Yi, YTemps);
	 Yting[2]=YS1_Q3( Yi, YTemps);
	 Yting[3]=YS2_AUFTHL12( Yi, YTemps);
	 YQTOT(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yting[0]=YS1_QTOT( Yi, YTemps);
	 Yting[1]=YS2_MAXBAS( Yi, YTemps-1);
	 Yting[2]=YS3_MAXBAS( Yi, YTemps-1);
	 Yting[3]=YS4_MAXBAS( Yi, YTemps-1);
	 YMAXBAS(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yting[0]=YS1_MAXBAS( Yi, YTemps);
	 YQS(Yi)->forward( Yting[0] );

}

	 return(0);
}

 int Ylinward_space_Sm()
{
	 YA1=1; YA2=0; YA3=0;
Yi=-1; Yj=-1; Yk=-1; /* init des indices de maille: maj par la boucle si valide*/
for(Yi=0; Yi<YA1_Sm; ++Yi)
{
	 Yting[0]=YS1_PE( Yi, YTemps);
	 Yting[1]=YS1_TT( Yi, YTemps);
	 Yting[2]=YS1_TC( Yi);
	 Yting[3]=YS1_degd( Yi);
	 Yting[4]=YS2_Snow( Yi, YTemps-1);
	 Ytbeta[0]=YG1_PE( Yi, YTemps);
	 Ytbeta[1]=YG1_TT( Yi, YTemps);
	 Ytbeta[2]=YG1_TC( Yi);
	 Ytbeta[3]=YG1_degd( Yi);
	 Ytbeta[4]=YG2_Snow( Yi, YTemps-1);
	 memset(Yjac, 0, 10*sizeof(double));
	 YSnow(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yvsmat (YNBS_Snow, YNBI_Snow, YMAX_JAC_NBI, &YG1Y_Snow, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_Snow, &YG1Y_Snow, YNBS_Snow*sizeof(YREAL));
	 }
	 Yting[0]=YS1_Snow( Yi, YTemps);
	 Yting[1]=YS1_HL1( Yi);
	 Ytbeta[0]=YG1_Snow( Yi, YTemps);
	 Ytbeta[1]=YG1_HL1( Yi);
	 memset(Yjac, 0, 5*sizeof(double));
	 YAUFTHL11(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_AUFTHL11, YNBI_AUFTHL11, YMAX_JAC_NBI, &YG1Y_AUFTHL11, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_AUFTHL11, &YG1Y_AUFTHL11, YNBS_AUFTHL11*sizeof(YREAL));
	 }
	 Yting[0]=YS1_AUFTHL11( Yi, YTemps);
	 Yting[1]=YS1_Snow( Yi, YTemps);
	 Yting[2]=YS1_AUFT( Yi);
	 Ytbeta[0]=YG1_AUFTHL11( Yi, YTemps);
	 Ytbeta[1]=YG1_Snow( Yi, YTemps);
	 Ytbeta[2]=YG1_AUFT( Yi);
	 memset(Yjac, 0, 10*sizeof(double));
	 YAUFTHL12(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmat (YNBS_AUFTHL12, YNBI_AUFTHL12, YMAX_JAC_NBI, &YG1Y_AUFTHL12, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_AUFTHL12, &YG1Y_AUFTHL12, YNBS_AUFTHL12*sizeof(YREAL));
	 }
	 Yting[0]=YS1_AUFTHL12( Yi, YTemps);
	 Yting[1]=YS1_SW( Yi, YTemps-1);
	 Yting[2]=YS1_FC( Yi);
	 Yting[3]=YS1_BE( Yi);
	 Ytbeta[0]=YG1_AUFTHL12( Yi, YTemps);
	 Ytbeta[1]=YG1_SW( Yi, YTemps-1);
	 Ytbeta[2]=YG1_FC( Yi);
	 Ytbeta[3]=YG1_BE( Yi);
	 memset(Yjac, 0, 5*sizeof(double));
	 YSoil1(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yvsmat (YNBS_Soil1, YNBI_Soil1, YMAX_JAC_NBI, &YG1Y_Soil1, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_Soil1, &YG1Y_Soil1, YNBS_Soil1*sizeof(YREAL));
	 }
	 Yting[0]=YS1_Soil1( Yi, YTemps);
	 Yting[1]=YS1_AUFTHL12( Yi, YTemps);
	 Yting[2]=YS1_SW( Yi, YTemps-1);
	 Ytbeta[0]=YG1_Soil1( Yi, YTemps);
	 Ytbeta[1]=YG1_AUFTHL12( Yi, YTemps);
	 Ytbeta[2]=YG1_SW( Yi, YTemps-1);
	 memset(Yjac, 0, 5*sizeof(double));
	 YSoil2(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmat (YNBS_Soil2, YNBI_Soil2, YMAX_JAC_NBI, &YG1Y_Soil2, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_Soil2, &YG1Y_Soil2, YNBS_Soil2*sizeof(YREAL));
	 }
	 Yting[0]=YS1_Soil2( Yi, YTemps);
	 Yting[1]=YS1_FC( Yi);
	 Ytbeta[0]=YG1_Soil2( Yi, YTemps);
	 Ytbeta[1]=YG1_FC( Yi);
	 memset(Yjac, 0, 5*sizeof(double));
	 YSoil3(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_Soil3, YNBI_Soil3, YMAX_JAC_NBI, &YG1Y_Soil3, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_Soil3, &YG1Y_Soil3, YNBS_Soil3*sizeof(YREAL));
	 }
	 Yting[0]=YS1_Soil3( Yi, YTemps);
	 Yting[1]=YS1_Soil1( Yi, YTemps);
	 Yting[2]=YS1_Soil2( Yi, YTemps);
	 Ytbeta[0]=YG1_Soil3( Yi, YTemps);
	 Ytbeta[1]=YG1_Soil1( Yi, YTemps);
	 Ytbeta[2]=YG1_Soil2( Yi, YTemps);
	 memset(Yjac, 0, 10*sizeof(double));
	 YSoil4(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmat (YNBS_Soil4, YNBI_Soil4, YMAX_JAC_NBI, &YG1Y_Soil4, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_Soil4, &YG1Y_Soil4, YNBS_Soil4*sizeof(YREAL));
	 }
	 Yting[0]=YS1_TT( Yi, YTemps);
	 Yting[1]=YS1_TM( Yi, YTemps);
	 Yting[2]=YS1_ETPM( Yi, YTemps);
	 Yting[3]=YS1_CEF( Yi);
	 Ytbeta[0]=YG1_TT( Yi, YTemps);
	 Ytbeta[1]=YG1_TM( Yi, YTemps);
	 Ytbeta[2]=YG1_ETPM( Yi, YTemps);
	 Ytbeta[3]=YG1_CEF( Yi);
	 memset(Yjac, 0, 5*sizeof(double));
	 YETP(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yvsmat (YNBS_ETP, YNBI_ETP, YMAX_JAC_NBI, &YG1Y_ETP, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_ETP, &YG1Y_ETP, YNBS_ETP*sizeof(YREAL));
	 }
	 Yting[0]=YS1_Soil4( Yi, YTemps);
	 Yting[1]=YS1_PWP( Yi);
	 Ytbeta[0]=YG1_Soil4( Yi, YTemps);
	 Ytbeta[1]=YG1_PWP( Yi);
	 memset(Yjac, 0, 10*sizeof(double));
	 YETR1(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_ETR1, YNBI_ETR1, YMAX_JAC_NBI, &YG1Y_ETR1, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_ETR1, &YG1Y_ETR1, YNBS_ETR1*sizeof(YREAL));
	 }
	 Yting[0]=YS1_ETR1( Yi, YTemps);
	 Yting[1]=YS1_ETP( Yi, YTemps);
	 Yting[2]=YS1_Soil4( Yi, YTemps);
	 Ytbeta[0]=YG1_ETR1( Yi, YTemps);
	 Ytbeta[1]=YG1_ETP( Yi, YTemps);
	 Ytbeta[2]=YG1_Soil4( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YETR2(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmat (YNBS_ETR2, YNBI_ETR2, YMAX_JAC_NBI, &YG1Y_ETR2, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_ETR2, &YG1Y_ETR2, YNBS_ETR2*sizeof(YREAL));
	 }
	 Yting[0]=YS1_ETR2( Yi, YTemps);
	 Yting[1]=YS1_Soil4( Yi, YTemps);
	 Ytbeta[0]=YG1_ETR2( Yi, YTemps);
	 Ytbeta[1]=YG1_Soil4( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YETR3(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_ETR3, YNBI_ETR3, YMAX_JAC_NBI, &YG1Y_ETR3, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_ETR3, &YG1Y_ETR3, YNBS_ETR3*sizeof(YREAL));
	 }
	 Yting[0]=YS1_ETR3( Yi, YTemps);
	 Yting[1]=YS1_ETR2( Yi, YTemps);
	 Yting[2]=YS1_Soil4( Yi, YTemps);
	 Ytbeta[0]=YG1_ETR3( Yi, YTemps);
	 Ytbeta[1]=YG1_ETR2( Yi, YTemps);
	 Ytbeta[2]=YG1_Soil4( Yi, YTemps);
	 memset(Yjac, 0, 10*sizeof(double));
	 YETR4(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmat (YNBS_ETR4, YNBI_ETR4, YMAX_JAC_NBI, &YG1Y_ETR4, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_ETR4, &YG1Y_ETR4, YNBS_ETR4*sizeof(YREAL));
	 }
	 Yting[0]=YS2_ETR4( Yi, YTemps);
	 Ytbeta[0]=YG2_ETR4( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YSW(Yi)->backward( Yting[0] );
	 Yvsmat (YNBS_SW, YNBI_SW, YMAX_JAC_NBI, &YG1Y_SW, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_SW, &YG1Y_SW, YNBS_SW*sizeof(YREAL));
	 }
	 Yting[0]=YS1_STW1( Yi, YTemps-1);
	 Yting[1]=YS2_Soil4( Yi, YTemps);
	 Ytbeta[0]=YG1_STW1( Yi, YTemps-1);
	 Ytbeta[1]=YG2_Soil4( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YR11(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_R11, YNBI_R11, YMAX_JAC_NBI, &YG1Y_R11, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_R11, &YG1Y_R11, YNBS_R11*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R11( Yi, YTemps);
	 Yting[1]=YS1_K1( Yi);
	 Yting[2]=YS1_ALPHA( Yi);
	 Ytbeta[0]=YG1_R11( Yi, YTemps);
	 Ytbeta[1]=YG1_K1( Yi);
	 Ytbeta[2]=YG1_ALPHA( Yi);
	 memset(Yjac, 0, 5*sizeof(double));
	 YR12(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmat (YNBS_R12, YNBI_R12, YMAX_JAC_NBI, &YG1Y_R12, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_R12, &YG1Y_R12, YNBS_R12*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R11( Yi, YTemps);
	 Yting[1]=YS1_R12( Yi, YTemps);
	 Ytbeta[0]=YG1_R11( Yi, YTemps);
	 Ytbeta[1]=YG1_R12( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YR13(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_R13, YNBI_R13, YMAX_JAC_NBI, &YG1Y_R13, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_R13, &YG1Y_R13, YNBS_R13*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R13( Yi, YTemps);
	 Yting[1]=YS1_R12( Yi, YTemps);
	 Yting[2]=YS1_STW1( Yi, YTemps-1);
	 Yting[3]=YS2_Soil4( Yi, YTemps);
	 Ytbeta[0]=YG1_R13( Yi, YTemps);
	 Ytbeta[1]=YG1_R12( Yi, YTemps);
	 Ytbeta[2]=YG1_STW1( Yi, YTemps-1);
	 Ytbeta[3]=YG2_Soil4( Yi, YTemps);
	 memset(Yjac, 0, 10*sizeof(double));
	 YR14(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yvsmat (YNBS_R14, YNBI_R14, YMAX_JAC_NBI, &YG1Y_R14, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_R14, &YG1Y_R14, YNBS_R14*sizeof(YREAL));
	 }
	 Yting[0]=YS2_R14( Yi, YTemps);
	 Ytbeta[0]=YG2_R14( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YQ1(Yi)->backward( Yting[0] );
	 Yvsmat (YNBS_Q1, YNBI_Q1, YMAX_JAC_NBI, &YG1Y_Q1, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_Q1, &YG1Y_Q1, YNBS_Q1*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R14( Yi, YTemps);
	 Yting[1]=YS1_PER1( Yi);
	 Ytbeta[0]=YG1_R14( Yi, YTemps);
	 Ytbeta[1]=YG1_PER1( Yi);
	 memset(Yjac, 0, 10*sizeof(double));
	 YR15(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_R15, YNBI_R15, YMAX_JAC_NBI, &YG1Y_R15, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_R15, &YG1Y_R15, YNBS_R15*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R15( Yi, YTemps);
	 Ytbeta[0]=YG1_R15( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YSTW1(Yi)->backward( Yting[0] );
	 Yvsmat (YNBS_STW1, YNBI_STW1, YMAX_JAC_NBI, &YG1Y_STW1, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_STW1, &YG1Y_STW1, YNBS_STW1*sizeof(YREAL));
	 }
	 Yting[0]=YS1_STW2( Yi, YTemps-1);
	 Yting[1]=YS2_R15( Yi, YTemps);
	 Yting[2]=YS1_K2( Yi);
	 Ytbeta[0]=YG1_STW2( Yi, YTemps-1);
	 Ytbeta[1]=YG2_R15( Yi, YTemps);
	 Ytbeta[2]=YG1_K2( Yi);
	 memset(Yjac, 0, 10*sizeof(double));
	 YR21(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmat (YNBS_R21, YNBI_R21, YMAX_JAC_NBI, &YG1Y_R21, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_R21, &YG1Y_R21, YNBS_R21*sizeof(YREAL));
	 }
	 Yting[0]=YS2_R21( Yi, YTemps);
	 Ytbeta[0]=YG2_R21( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YQ2(Yi)->backward( Yting[0] );
	 Yvsmat (YNBS_Q2, YNBI_Q2, YMAX_JAC_NBI, &YG1Y_Q2, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_Q2, &YG1Y_Q2, YNBS_Q2*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R21( Yi, YTemps);
	 Yting[1]=YS1_Q2( Yi, YTemps);
	 Ytbeta[0]=YG1_R21( Yi, YTemps);
	 Ytbeta[1]=YG1_Q2( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YR22(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_R22, YNBI_R22, YMAX_JAC_NBI, &YG1Y_R22, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_R22, &YG1Y_R22, YNBS_R22*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R22( Yi, YTemps);
	 Yting[1]=YS1_PER2( Yi);
	 Ytbeta[0]=YG1_R22( Yi, YTemps);
	 Ytbeta[1]=YG1_PER2( Yi);
	 memset(Yjac, 0, 10*sizeof(double));
	 YR23(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_R23, YNBI_R23, YMAX_JAC_NBI, &YG1Y_R23, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_R23, &YG1Y_R23, YNBS_R23*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R23( Yi, YTemps);
	 Ytbeta[0]=YG1_R23( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YSTW2(Yi)->backward( Yting[0] );
	 Yvsmat (YNBS_STW2, YNBI_STW2, YMAX_JAC_NBI, &YG1Y_STW2, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_STW2, &YG1Y_STW2, YNBS_STW2*sizeof(YREAL));
	 }
	 Yting[0]=YS1_STW3( Yi, YTemps-1);
	 Yting[1]=YS2_R23( Yi, YTemps);
	 Yting[2]=YS1_K3( Yi);
	 Ytbeta[0]=YG1_STW3( Yi, YTemps-1);
	 Ytbeta[1]=YG2_R23( Yi, YTemps);
	 Ytbeta[2]=YG1_K3( Yi);
	 memset(Yjac, 0, 10*sizeof(double));
	 YR3(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmat (YNBS_R3, YNBI_R3, YMAX_JAC_NBI, &YG1Y_R3, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_R3, &YG1Y_R3, YNBS_R3*sizeof(YREAL));
	 }
	 Yting[0]=YS2_R3( Yi, YTemps);
	 Ytbeta[0]=YG2_R3( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YQ3(Yi)->backward( Yting[0] );
	 Yvsmat (YNBS_Q3, YNBI_Q3, YMAX_JAC_NBI, &YG1Y_Q3, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_Q3, &YG1Y_Q3, YNBS_Q3*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R3( Yi, YTemps);
	 Ytbeta[0]=YG1_R3( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YSTW3(Yi)->backward( Yting[0] );
	 Yvsmat (YNBS_STW3, YNBI_STW3, YMAX_JAC_NBI, &YG1Y_STW3, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_STW3, &YG1Y_STW3, YNBS_STW3*sizeof(YREAL));
	 }
	 Yting[0]=YS1_Q1( Yi, YTemps);
	 Yting[1]=YS1_Q2( Yi, YTemps);
	 Yting[2]=YS1_Q3( Yi, YTemps);
	 Yting[3]=YS2_AUFTHL12( Yi, YTemps);
	 Ytbeta[0]=YG1_Q1( Yi, YTemps);
	 Ytbeta[1]=YG1_Q2( Yi, YTemps);
	 Ytbeta[2]=YG1_Q3( Yi, YTemps);
	 Ytbeta[3]=YG2_AUFTHL12( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YQTOT(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yvsmat (YNBS_QTOT, YNBI_QTOT, YMAX_JAC_NBI, &YG1Y_QTOT, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_QTOT, &YG1Y_QTOT, YNBS_QTOT*sizeof(YREAL));
	 }
	 Yting[0]=YS1_QTOT( Yi, YTemps);
	 Yting[1]=YS2_MAXBAS( Yi, YTemps-1);
	 Yting[2]=YS3_MAXBAS( Yi, YTemps-1);
	 Yting[3]=YS4_MAXBAS( Yi, YTemps-1);
	 Ytbeta[0]=YG1_QTOT( Yi, YTemps);
	 Ytbeta[1]=YG2_MAXBAS( Yi, YTemps-1);
	 Ytbeta[2]=YG3_MAXBAS( Yi, YTemps-1);
	 Ytbeta[3]=YG4_MAXBAS( Yi, YTemps-1);
	 memset(Yjac, 0, 20*sizeof(double));
	 YMAXBAS(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yvsmat (YNBS_MAXBAS, YNBI_MAXBAS, YMAX_JAC_NBI, &YG1Y_MAXBAS, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_MAXBAS, &YG1Y_MAXBAS, YNBS_MAXBAS*sizeof(YREAL));
	 }
	 Yting[0]=YS1_MAXBAS( Yi, YTemps);
	 Ytbeta[0]=YG1_MAXBAS( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YQS(Yi)->backward( Yting[0] );
	 Yvsmat (YNBS_QS, YNBI_QS, YMAX_JAC_NBI, &YG1Y_QS, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_QS, &YG1Y_QS, YNBS_QS*sizeof(YREAL));
	 }

}

	 return(0);
}

int Ydfward_space_Sm(int modop, char *nmmod, int All, int KeKo, int koleft, float pdx, float ptol, int yi, int yj, int yk)
{
	 int nbko=0;
	 YA1=1; YA2=0; YA3=0;
Yi=-1; Yj=-1; Yk=-1; /* init des indices de maille: maj par la boucle si valide*/
for(Yi=0; Yi<YA1_Sm; ++Yi)
{
	 Yting[0]=YS1_PE( Yi, YTemps);
	 Yting[1]=YS1_TT( Yi, YTemps);
	 Yting[2]=YS1_TC( Yi);
	 Yting[3]=YS1_degd( Yi);
	 Yting[4]=YS2_Snow( Yi, YTemps-1);
	if (!strcmp(nmmod, "Snow") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_Snow(modop,KeKo,pdx,ptol,YNBI_Snow,YNBS_Snow,"Snow",Yting,YSnow[Yi]->Ystate[0],YSnow[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YSnow(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yting[0]=YS1_Snow( Yi, YTemps);
	 Yting[1]=YS1_HL1( Yi);
	if (!strcmp(nmmod, "AUFTHL11") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_AUFTHL11(modop,KeKo,pdx,ptol,YNBI_AUFTHL11,YNBS_AUFTHL11,"AUFTHL11",Yting,YAUFTHL11[Yi]->Ystate[0],YAUFTHL11[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YAUFTHL11(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_AUFTHL11( Yi, YTemps);
	 Yting[1]=YS1_Snow( Yi, YTemps);
	 Yting[2]=YS1_AUFT( Yi);
	if (!strcmp(nmmod, "AUFTHL12") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_AUFTHL12(modop,KeKo,pdx,ptol,YNBI_AUFTHL12,YNBS_AUFTHL12,"AUFTHL12",Yting,YAUFTHL12[Yi]->Ystate[0],YAUFTHL12[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YAUFTHL12(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_AUFTHL12( Yi, YTemps);
	 Yting[1]=YS1_SW( Yi, YTemps-1);
	 Yting[2]=YS1_FC( Yi);
	 Yting[3]=YS1_BE( Yi);
	if (!strcmp(nmmod, "Soil1") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_Soil1(modop,KeKo,pdx,ptol,YNBI_Soil1,YNBS_Soil1,"Soil1",Yting,YSoil1[Yi]->Ystate[0],YSoil1[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YSoil1(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yting[0]=YS1_Soil1( Yi, YTemps);
	 Yting[1]=YS1_AUFTHL12( Yi, YTemps);
	 Yting[2]=YS1_SW( Yi, YTemps-1);
	if (!strcmp(nmmod, "Soil2") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_Soil2(modop,KeKo,pdx,ptol,YNBI_Soil2,YNBS_Soil2,"Soil2",Yting,YSoil2[Yi]->Ystate[0],YSoil2[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YSoil2(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_Soil2( Yi, YTemps);
	 Yting[1]=YS1_FC( Yi);
	if (!strcmp(nmmod, "Soil3") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_Soil3(modop,KeKo,pdx,ptol,YNBI_Soil3,YNBS_Soil3,"Soil3",Yting,YSoil3[Yi]->Ystate[0],YSoil3[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YSoil3(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_Soil3( Yi, YTemps);
	 Yting[1]=YS1_Soil1( Yi, YTemps);
	 Yting[2]=YS1_Soil2( Yi, YTemps);
	if (!strcmp(nmmod, "Soil4") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_Soil4(modop,KeKo,pdx,ptol,YNBI_Soil4,YNBS_Soil4,"Soil4",Yting,YSoil4[Yi]->Ystate[0],YSoil4[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YSoil4(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_TT( Yi, YTemps);
	 Yting[1]=YS1_TM( Yi, YTemps);
	 Yting[2]=YS1_ETPM( Yi, YTemps);
	 Yting[3]=YS1_CEF( Yi);
	if (!strcmp(nmmod, "ETP") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_ETP(modop,KeKo,pdx,ptol,YNBI_ETP,YNBS_ETP,"ETP",Yting,YETP[Yi]->Ystate[0],YETP[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YETP(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yting[0]=YS1_Soil4( Yi, YTemps);
	 Yting[1]=YS1_PWP( Yi);
	if (!strcmp(nmmod, "ETR1") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_ETR1(modop,KeKo,pdx,ptol,YNBI_ETR1,YNBS_ETR1,"ETR1",Yting,YETR1[Yi]->Ystate[0],YETR1[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YETR1(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_ETR1( Yi, YTemps);
	 Yting[1]=YS1_ETP( Yi, YTemps);
	 Yting[2]=YS1_Soil4( Yi, YTemps);
	if (!strcmp(nmmod, "ETR2") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_ETR2(modop,KeKo,pdx,ptol,YNBI_ETR2,YNBS_ETR2,"ETR2",Yting,YETR2[Yi]->Ystate[0],YETR2[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YETR2(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_ETR2( Yi, YTemps);
	 Yting[1]=YS1_Soil4( Yi, YTemps);
	if (!strcmp(nmmod, "ETR3") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_ETR3(modop,KeKo,pdx,ptol,YNBI_ETR3,YNBS_ETR3,"ETR3",Yting,YETR3[Yi]->Ystate[0],YETR3[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YETR3(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_ETR3( Yi, YTemps);
	 Yting[1]=YS1_ETR2( Yi, YTemps);
	 Yting[2]=YS1_Soil4( Yi, YTemps);
	if (!strcmp(nmmod, "ETR4") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_ETR4(modop,KeKo,pdx,ptol,YNBI_ETR4,YNBS_ETR4,"ETR4",Yting,YETR4[Yi]->Ystate[0],YETR4[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YETR4(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS2_ETR4( Yi, YTemps);
	if (!strcmp(nmmod, "SW") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_SW(modop,KeKo,pdx,ptol,YNBI_SW,YNBS_SW,"SW",Yting,YSW[Yi]->Ystate[0],YSW[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YSW(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_STW1( Yi, YTemps-1);
	 Yting[1]=YS2_Soil4( Yi, YTemps);
	if (!strcmp(nmmod, "R11") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_R11(modop,KeKo,pdx,ptol,YNBI_R11,YNBS_R11,"R11",Yting,YR11[Yi]->Ystate[0],YR11[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YR11(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R11( Yi, YTemps);
	 Yting[1]=YS1_K1( Yi);
	 Yting[2]=YS1_ALPHA( Yi);
	if (!strcmp(nmmod, "R12") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_R12(modop,KeKo,pdx,ptol,YNBI_R12,YNBS_R12,"R12",Yting,YR12[Yi]->Ystate[0],YR12[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YR12(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_R11( Yi, YTemps);
	 Yting[1]=YS1_R12( Yi, YTemps);
	if (!strcmp(nmmod, "R13") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_R13(modop,KeKo,pdx,ptol,YNBI_R13,YNBS_R13,"R13",Yting,YR13[Yi]->Ystate[0],YR13[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YR13(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R13( Yi, YTemps);
	 Yting[1]=YS1_R12( Yi, YTemps);
	 Yting[2]=YS1_STW1( Yi, YTemps-1);
	 Yting[3]=YS2_Soil4( Yi, YTemps);
	if (!strcmp(nmmod, "R14") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_R14(modop,KeKo,pdx,ptol,YNBI_R14,YNBS_R14,"R14",Yting,YR14[Yi]->Ystate[0],YR14[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YR14(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yting[0]=YS2_R14( Yi, YTemps);
	if (!strcmp(nmmod, "Q1") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_Q1(modop,KeKo,pdx,ptol,YNBI_Q1,YNBS_Q1,"Q1",Yting,YQ1[Yi]->Ystate[0],YQ1[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YQ1(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_R14( Yi, YTemps);
	 Yting[1]=YS1_PER1( Yi);
	if (!strcmp(nmmod, "R15") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_R15(modop,KeKo,pdx,ptol,YNBI_R15,YNBS_R15,"R15",Yting,YR15[Yi]->Ystate[0],YR15[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YR15(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R15( Yi, YTemps);
	if (!strcmp(nmmod, "STW1") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_STW1(modop,KeKo,pdx,ptol,YNBI_STW1,YNBS_STW1,"STW1",Yting,YSTW1[Yi]->Ystate[0],YSTW1[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YSTW1(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_STW2( Yi, YTemps-1);
	 Yting[1]=YS2_R15( Yi, YTemps);
	 Yting[2]=YS1_K2( Yi);
	if (!strcmp(nmmod, "R21") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_R21(modop,KeKo,pdx,ptol,YNBI_R21,YNBS_R21,"R21",Yting,YR21[Yi]->Ystate[0],YR21[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YR21(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS2_R21( Yi, YTemps);
	if (!strcmp(nmmod, "Q2") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_Q2(modop,KeKo,pdx,ptol,YNBI_Q2,YNBS_Q2,"Q2",Yting,YQ2[Yi]->Ystate[0],YQ2[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YQ2(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_R21( Yi, YTemps);
	 Yting[1]=YS1_Q2( Yi, YTemps);
	if (!strcmp(nmmod, "R22") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_R22(modop,KeKo,pdx,ptol,YNBI_R22,YNBS_R22,"R22",Yting,YR22[Yi]->Ystate[0],YR22[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YR22(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R22( Yi, YTemps);
	 Yting[1]=YS1_PER2( Yi);
	if (!strcmp(nmmod, "R23") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_R23(modop,KeKo,pdx,ptol,YNBI_R23,YNBS_R23,"R23",Yting,YR23[Yi]->Ystate[0],YR23[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YR23(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R23( Yi, YTemps);
	if (!strcmp(nmmod, "STW2") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_STW2(modop,KeKo,pdx,ptol,YNBI_STW2,YNBS_STW2,"STW2",Yting,YSTW2[Yi]->Ystate[0],YSTW2[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YSTW2(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_STW3( Yi, YTemps-1);
	 Yting[1]=YS2_R23( Yi, YTemps);
	 Yting[2]=YS1_K3( Yi);
	if (!strcmp(nmmod, "R3") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_R3(modop,KeKo,pdx,ptol,YNBI_R3,YNBS_R3,"R3",Yting,YR3[Yi]->Ystate[0],YR3[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YR3(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS2_R3( Yi, YTemps);
	if (!strcmp(nmmod, "Q3") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_Q3(modop,KeKo,pdx,ptol,YNBI_Q3,YNBS_Q3,"Q3",Yting,YQ3[Yi]->Ystate[0],YQ3[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YQ3(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_R3( Yi, YTemps);
	if (!strcmp(nmmod, "STW3") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_STW3(modop,KeKo,pdx,ptol,YNBI_STW3,YNBS_STW3,"STW3",Yting,YSTW3[Yi]->Ystate[0],YSTW3[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YSTW3(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_Q1( Yi, YTemps);
	 Yting[1]=YS1_Q2( Yi, YTemps);
	 Yting[2]=YS1_Q3( Yi, YTemps);
	 Yting[3]=YS2_AUFTHL12( Yi, YTemps);
	if (!strcmp(nmmod, "QTOT") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_QTOT(modop,KeKo,pdx,ptol,YNBI_QTOT,YNBS_QTOT,"QTOT",Yting,YQTOT[Yi]->Ystate[0],YQTOT[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YQTOT(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yting[0]=YS1_QTOT( Yi, YTemps);
	 Yting[1]=YS2_MAXBAS( Yi, YTemps-1);
	 Yting[2]=YS3_MAXBAS( Yi, YTemps-1);
	 Yting[3]=YS4_MAXBAS( Yi, YTemps-1);
	if (!strcmp(nmmod, "MAXBAS") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_MAXBAS(modop,KeKo,pdx,ptol,YNBI_MAXBAS,YNBS_MAXBAS,"MAXBAS",Yting,YMAXBAS[Yi]->Ystate[0],YMAXBAS[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YMAXBAS(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yting[0]=YS1_MAXBAS( Yi, YTemps);
	if (!strcmp(nmmod, "QS") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_QS(modop,KeKo,pdx,ptol,YNBI_QS,YNBS_QS,"QS",Yting,YQS[Yi]->Ystate[0],YQS[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YQS(Yi)->forward( Yting[0] );

}

	 return(nbko);
}

int Ydfward_space_maille_Sm(int modop, char *nmmod, int All, int KeKo,  float pdx, float ptol)
{
	 int nbko=0;
	 Yting[0]=YS1_PE( Yi, YTemps);
	 Yting[1]=YS1_TT( Yi, YTemps);
	 Yting[2]=YS1_TC( Yi);
	 Yting[3]=YS1_degd( Yi);
	 Yting[4]=YS2_Snow( Yi, YTemps-1);
	if (!strcmp(nmmod, "Snow") || All)
	{
	 nbko += Ytestdf_Snow(modop,KeKo,pdx,ptol,YNBI_Snow,YNBS_Snow,"Snow",Yting,YSnow[Yi]->Ystate[0],YSnow[Yi]);
	}
	 YSnow(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yting[0]=YS1_Snow( Yi, YTemps);
	 Yting[1]=YS1_HL1( Yi);
	if (!strcmp(nmmod, "AUFTHL11") || All)
	{
	 nbko += Ytestdf_AUFTHL11(modop,KeKo,pdx,ptol,YNBI_AUFTHL11,YNBS_AUFTHL11,"AUFTHL11",Yting,YAUFTHL11[Yi]->Ystate[0],YAUFTHL11[Yi]);
	}
	 YAUFTHL11(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_AUFTHL11( Yi, YTemps);
	 Yting[1]=YS1_Snow( Yi, YTemps);
	 Yting[2]=YS1_AUFT( Yi);
	if (!strcmp(nmmod, "AUFTHL12") || All)
	{
	 nbko += Ytestdf_AUFTHL12(modop,KeKo,pdx,ptol,YNBI_AUFTHL12,YNBS_AUFTHL12,"AUFTHL12",Yting,YAUFTHL12[Yi]->Ystate[0],YAUFTHL12[Yi]);
	}
	 YAUFTHL12(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_AUFTHL12( Yi, YTemps);
	 Yting[1]=YS1_SW( Yi, YTemps-1);
	 Yting[2]=YS1_FC( Yi);
	 Yting[3]=YS1_BE( Yi);
	if (!strcmp(nmmod, "Soil1") || All)
	{
	 nbko += Ytestdf_Soil1(modop,KeKo,pdx,ptol,YNBI_Soil1,YNBS_Soil1,"Soil1",Yting,YSoil1[Yi]->Ystate[0],YSoil1[Yi]);
	}
	 YSoil1(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yting[0]=YS1_Soil1( Yi, YTemps);
	 Yting[1]=YS1_AUFTHL12( Yi, YTemps);
	 Yting[2]=YS1_SW( Yi, YTemps-1);
	if (!strcmp(nmmod, "Soil2") || All)
	{
	 nbko += Ytestdf_Soil2(modop,KeKo,pdx,ptol,YNBI_Soil2,YNBS_Soil2,"Soil2",Yting,YSoil2[Yi]->Ystate[0],YSoil2[Yi]);
	}
	 YSoil2(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_Soil2( Yi, YTemps);
	 Yting[1]=YS1_FC( Yi);
	if (!strcmp(nmmod, "Soil3") || All)
	{
	 nbko += Ytestdf_Soil3(modop,KeKo,pdx,ptol,YNBI_Soil3,YNBS_Soil3,"Soil3",Yting,YSoil3[Yi]->Ystate[0],YSoil3[Yi]);
	}
	 YSoil3(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_Soil3( Yi, YTemps);
	 Yting[1]=YS1_Soil1( Yi, YTemps);
	 Yting[2]=YS1_Soil2( Yi, YTemps);
	if (!strcmp(nmmod, "Soil4") || All)
	{
	 nbko += Ytestdf_Soil4(modop,KeKo,pdx,ptol,YNBI_Soil4,YNBS_Soil4,"Soil4",Yting,YSoil4[Yi]->Ystate[0],YSoil4[Yi]);
	}
	 YSoil4(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_TT( Yi, YTemps);
	 Yting[1]=YS1_TM( Yi, YTemps);
	 Yting[2]=YS1_ETPM( Yi, YTemps);
	 Yting[3]=YS1_CEF( Yi);
	if (!strcmp(nmmod, "ETP") || All)
	{
	 nbko += Ytestdf_ETP(modop,KeKo,pdx,ptol,YNBI_ETP,YNBS_ETP,"ETP",Yting,YETP[Yi]->Ystate[0],YETP[Yi]);
	}
	 YETP(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yting[0]=YS1_Soil4( Yi, YTemps);
	 Yting[1]=YS1_PWP( Yi);
	if (!strcmp(nmmod, "ETR1") || All)
	{
	 nbko += Ytestdf_ETR1(modop,KeKo,pdx,ptol,YNBI_ETR1,YNBS_ETR1,"ETR1",Yting,YETR1[Yi]->Ystate[0],YETR1[Yi]);
	}
	 YETR1(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_ETR1( Yi, YTemps);
	 Yting[1]=YS1_ETP( Yi, YTemps);
	 Yting[2]=YS1_Soil4( Yi, YTemps);
	if (!strcmp(nmmod, "ETR2") || All)
	{
	 nbko += Ytestdf_ETR2(modop,KeKo,pdx,ptol,YNBI_ETR2,YNBS_ETR2,"ETR2",Yting,YETR2[Yi]->Ystate[0],YETR2[Yi]);
	}
	 YETR2(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_ETR2( Yi, YTemps);
	 Yting[1]=YS1_Soil4( Yi, YTemps);
	if (!strcmp(nmmod, "ETR3") || All)
	{
	 nbko += Ytestdf_ETR3(modop,KeKo,pdx,ptol,YNBI_ETR3,YNBS_ETR3,"ETR3",Yting,YETR3[Yi]->Ystate[0],YETR3[Yi]);
	}
	 YETR3(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_ETR3( Yi, YTemps);
	 Yting[1]=YS1_ETR2( Yi, YTemps);
	 Yting[2]=YS1_Soil4( Yi, YTemps);
	if (!strcmp(nmmod, "ETR4") || All)
	{
	 nbko += Ytestdf_ETR4(modop,KeKo,pdx,ptol,YNBI_ETR4,YNBS_ETR4,"ETR4",Yting,YETR4[Yi]->Ystate[0],YETR4[Yi]);
	}
	 YETR4(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS2_ETR4( Yi, YTemps);
	if (!strcmp(nmmod, "SW") || All)
	{
	 nbko += Ytestdf_SW(modop,KeKo,pdx,ptol,YNBI_SW,YNBS_SW,"SW",Yting,YSW[Yi]->Ystate[0],YSW[Yi]);
	}
	 YSW(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_STW1( Yi, YTemps-1);
	 Yting[1]=YS2_Soil4( Yi, YTemps);
	if (!strcmp(nmmod, "R11") || All)
	{
	 nbko += Ytestdf_R11(modop,KeKo,pdx,ptol,YNBI_R11,YNBS_R11,"R11",Yting,YR11[Yi]->Ystate[0],YR11[Yi]);
	}
	 YR11(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R11( Yi, YTemps);
	 Yting[1]=YS1_K1( Yi);
	 Yting[2]=YS1_ALPHA( Yi);
	if (!strcmp(nmmod, "R12") || All)
	{
	 nbko += Ytestdf_R12(modop,KeKo,pdx,ptol,YNBI_R12,YNBS_R12,"R12",Yting,YR12[Yi]->Ystate[0],YR12[Yi]);
	}
	 YR12(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_R11( Yi, YTemps);
	 Yting[1]=YS1_R12( Yi, YTemps);
	if (!strcmp(nmmod, "R13") || All)
	{
	 nbko += Ytestdf_R13(modop,KeKo,pdx,ptol,YNBI_R13,YNBS_R13,"R13",Yting,YR13[Yi]->Ystate[0],YR13[Yi]);
	}
	 YR13(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R13( Yi, YTemps);
	 Yting[1]=YS1_R12( Yi, YTemps);
	 Yting[2]=YS1_STW1( Yi, YTemps-1);
	 Yting[3]=YS2_Soil4( Yi, YTemps);
	if (!strcmp(nmmod, "R14") || All)
	{
	 nbko += Ytestdf_R14(modop,KeKo,pdx,ptol,YNBI_R14,YNBS_R14,"R14",Yting,YR14[Yi]->Ystate[0],YR14[Yi]);
	}
	 YR14(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yting[0]=YS2_R14( Yi, YTemps);
	if (!strcmp(nmmod, "Q1") || All)
	{
	 nbko += Ytestdf_Q1(modop,KeKo,pdx,ptol,YNBI_Q1,YNBS_Q1,"Q1",Yting,YQ1[Yi]->Ystate[0],YQ1[Yi]);
	}
	 YQ1(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_R14( Yi, YTemps);
	 Yting[1]=YS1_PER1( Yi);
	if (!strcmp(nmmod, "R15") || All)
	{
	 nbko += Ytestdf_R15(modop,KeKo,pdx,ptol,YNBI_R15,YNBS_R15,"R15",Yting,YR15[Yi]->Ystate[0],YR15[Yi]);
	}
	 YR15(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R15( Yi, YTemps);
	if (!strcmp(nmmod, "STW1") || All)
	{
	 nbko += Ytestdf_STW1(modop,KeKo,pdx,ptol,YNBI_STW1,YNBS_STW1,"STW1",Yting,YSTW1[Yi]->Ystate[0],YSTW1[Yi]);
	}
	 YSTW1(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_STW2( Yi, YTemps-1);
	 Yting[1]=YS2_R15( Yi, YTemps);
	 Yting[2]=YS1_K2( Yi);
	if (!strcmp(nmmod, "R21") || All)
	{
	 nbko += Ytestdf_R21(modop,KeKo,pdx,ptol,YNBI_R21,YNBS_R21,"R21",Yting,YR21[Yi]->Ystate[0],YR21[Yi]);
	}
	 YR21(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS2_R21( Yi, YTemps);
	if (!strcmp(nmmod, "Q2") || All)
	{
	 nbko += Ytestdf_Q2(modop,KeKo,pdx,ptol,YNBI_Q2,YNBS_Q2,"Q2",Yting,YQ2[Yi]->Ystate[0],YQ2[Yi]);
	}
	 YQ2(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_R21( Yi, YTemps);
	 Yting[1]=YS1_Q2( Yi, YTemps);
	if (!strcmp(nmmod, "R22") || All)
	{
	 nbko += Ytestdf_R22(modop,KeKo,pdx,ptol,YNBI_R22,YNBS_R22,"R22",Yting,YR22[Yi]->Ystate[0],YR22[Yi]);
	}
	 YR22(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R22( Yi, YTemps);
	 Yting[1]=YS1_PER2( Yi);
	if (!strcmp(nmmod, "R23") || All)
	{
	 nbko += Ytestdf_R23(modop,KeKo,pdx,ptol,YNBI_R23,YNBS_R23,"R23",Yting,YR23[Yi]->Ystate[0],YR23[Yi]);
	}
	 YR23(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R23( Yi, YTemps);
	if (!strcmp(nmmod, "STW2") || All)
	{
	 nbko += Ytestdf_STW2(modop,KeKo,pdx,ptol,YNBI_STW2,YNBS_STW2,"STW2",Yting,YSTW2[Yi]->Ystate[0],YSTW2[Yi]);
	}
	 YSTW2(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_STW3( Yi, YTemps-1);
	 Yting[1]=YS2_R23( Yi, YTemps);
	 Yting[2]=YS1_K3( Yi);
	if (!strcmp(nmmod, "R3") || All)
	{
	 nbko += Ytestdf_R3(modop,KeKo,pdx,ptol,YNBI_R3,YNBS_R3,"R3",Yting,YR3[Yi]->Ystate[0],YR3[Yi]);
	}
	 YR3(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS2_R3( Yi, YTemps);
	if (!strcmp(nmmod, "Q3") || All)
	{
	 nbko += Ytestdf_Q3(modop,KeKo,pdx,ptol,YNBI_Q3,YNBS_Q3,"Q3",Yting,YQ3[Yi]->Ystate[0],YQ3[Yi]);
	}
	 YQ3(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_R3( Yi, YTemps);
	if (!strcmp(nmmod, "STW3") || All)
	{
	 nbko += Ytestdf_STW3(modop,KeKo,pdx,ptol,YNBI_STW3,YNBS_STW3,"STW3",Yting,YSTW3[Yi]->Ystate[0],YSTW3[Yi]);
	}
	 YSTW3(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_Q1( Yi, YTemps);
	 Yting[1]=YS1_Q2( Yi, YTemps);
	 Yting[2]=YS1_Q3( Yi, YTemps);
	 Yting[3]=YS2_AUFTHL12( Yi, YTemps);
	if (!strcmp(nmmod, "QTOT") || All)
	{
	 nbko += Ytestdf_QTOT(modop,KeKo,pdx,ptol,YNBI_QTOT,YNBS_QTOT,"QTOT",Yting,YQTOT[Yi]->Ystate[0],YQTOT[Yi]);
	}
	 YQTOT(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yting[0]=YS1_QTOT( Yi, YTemps);
	 Yting[1]=YS2_MAXBAS( Yi, YTemps-1);
	 Yting[2]=YS3_MAXBAS( Yi, YTemps-1);
	 Yting[3]=YS4_MAXBAS( Yi, YTemps-1);
	if (!strcmp(nmmod, "MAXBAS") || All)
	{
	 nbko += Ytestdf_MAXBAS(modop,KeKo,pdx,ptol,YNBI_MAXBAS,YNBS_MAXBAS,"MAXBAS",Yting,YMAXBAS[Yi]->Ystate[0],YMAXBAS[Yi]);
	}
	 YMAXBAS(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yting[0]=YS1_MAXBAS( Yi, YTemps);
	if (!strcmp(nmmod, "QS") || All)
	{
	 nbko += Ytestdf_QS(modop,KeKo,pdx,ptol,YNBI_QS,YNBS_QS,"QS",Yting,YQS[Yi]->Ystate[0],YQS[Yi]);
	}
	 YQS(Yi)->forward( Yting[0] );
	 return(nbko);
}

 int Ybackward_space_Sm()
{
	 YA1=1; YA2=0; YA3=0;
Yi=-1; Yj=-1; Yk=-1; /* init des indices de maille: maj par la boucle si valide*/
for(Yi=YA1_Sm-1; Yi>=0; --Yi)
{
	 Yting[0]=YS1_MAXBAS( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YQS(Yi)->backward( Yting[0] );
	 Yvsmatt (YNBS_QS, YNBI_QS, YMAX_JAC_NBI, &YG1Y_QS, Yjac[0], Ytbeta);
	 YG1_MAXBAS( Yi, YTemps) += Ytbeta[0];
	 if (Ytestad_module) {
			Yting[0]=YD1_MAXBAS( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_QS, &YG1Y_QS, YNBS_QS);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_QS);
			if (!Ytesterrad_mod("QS", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_QTOT( Yi, YTemps);
	 Yting[1]=YS2_MAXBAS( Yi, YTemps-1);
	 Yting[2]=YS3_MAXBAS( Yi, YTemps-1);
	 Yting[3]=YS4_MAXBAS( Yi, YTemps-1);
	 memset(Yjac, 0, 20*sizeof(double));
	 YMAXBAS(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yvsmatt (YNBS_MAXBAS, YNBI_MAXBAS, YMAX_JAC_NBI, &YG1Y_MAXBAS, Yjac[0], Ytbeta);
	 YG1_QTOT( Yi, YTemps) += Ytbeta[0];
	 YG2_MAXBAS( Yi, YTemps-1) += Ytbeta[1];
	 YG3_MAXBAS( Yi, YTemps-1) += Ytbeta[2];
	 YG4_MAXBAS( Yi, YTemps-1) += Ytbeta[3];
	 if (Ytestad_module) {
			Yting[0]=YD1_QTOT( Yi, YTemps);
			Yting[1]=YD2_MAXBAS( Yi, YTemps-1);
			Yting[2]=YD3_MAXBAS( Yi, YTemps-1);
			Yting[3]=YD4_MAXBAS( Yi, YTemps-1);
			YLTRes = Yprosca(&YD1Y_MAXBAS, &YG1Y_MAXBAS, YNBS_MAXBAS);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_MAXBAS);
			if (!Ytesterrad_mod("MAXBAS", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_Q1( Yi, YTemps);
	 Yting[1]=YS1_Q2( Yi, YTemps);
	 Yting[2]=YS1_Q3( Yi, YTemps);
	 Yting[3]=YS2_AUFTHL12( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YQTOT(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yvsmatt (YNBS_QTOT, YNBI_QTOT, YMAX_JAC_NBI, &YG1Y_QTOT, Yjac[0], Ytbeta);
	 YG1_Q1( Yi, YTemps) += Ytbeta[0];
	 YG1_Q2( Yi, YTemps) += Ytbeta[1];
	 YG1_Q3( Yi, YTemps) += Ytbeta[2];
	 YG2_AUFTHL12( Yi, YTemps) += Ytbeta[3];
	 if (Ytestad_module) {
			Yting[0]=YD1_Q1( Yi, YTemps);
			Yting[1]=YD1_Q2( Yi, YTemps);
			Yting[2]=YD1_Q3( Yi, YTemps);
			Yting[3]=YD2_AUFTHL12( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_QTOT, &YG1Y_QTOT, YNBS_QTOT);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_QTOT);
			if (!Ytesterrad_mod("QTOT", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R3( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YSTW3(Yi)->backward( Yting[0] );
	 Yvsmatt (YNBS_STW3, YNBI_STW3, YMAX_JAC_NBI, &YG1Y_STW3, Yjac[0], Ytbeta);
	 YG1_R3( Yi, YTemps) += Ytbeta[0];
	 if (Ytestad_module) {
			Yting[0]=YD1_R3( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_STW3, &YG1Y_STW3, YNBS_STW3);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_STW3);
			if (!Ytesterrad_mod("STW3", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS2_R3( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YQ3(Yi)->backward( Yting[0] );
	 Yvsmatt (YNBS_Q3, YNBI_Q3, YMAX_JAC_NBI, &YG1Y_Q3, Yjac[0], Ytbeta);
	 YG2_R3( Yi, YTemps) += Ytbeta[0];
	 if (Ytestad_module) {
			Yting[0]=YD2_R3( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_Q3, &YG1Y_Q3, YNBS_Q3);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_Q3);
			if (!Ytesterrad_mod("Q3", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_STW3( Yi, YTemps-1);
	 Yting[1]=YS2_R23( Yi, YTemps);
	 Yting[2]=YS1_K3( Yi);
	 memset(Yjac, 0, 10*sizeof(double));
	 YR3(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmatt (YNBS_R3, YNBI_R3, YMAX_JAC_NBI, &YG1Y_R3, Yjac[0], Ytbeta);
	 YG1_STW3( Yi, YTemps-1) += Ytbeta[0];
	 YG2_R23( Yi, YTemps) += Ytbeta[1];
	 YG1_K3( Yi) += Ytbeta[2];
	 if (Ytestad_module) {
			Yting[0]=YD1_STW3( Yi, YTemps-1);
			Yting[1]=YD2_R23( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[2]=YD1_K3( Yi, 0);
			YLTRes = Yprosca(&YD1Y_R3, &YG1Y_R3, YNBS_R3);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_R3);
			if (!Ytesterrad_mod("R3", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R23( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YSTW2(Yi)->backward( Yting[0] );
	 Yvsmatt (YNBS_STW2, YNBI_STW2, YMAX_JAC_NBI, &YG1Y_STW2, Yjac[0], Ytbeta);
	 YG1_R23( Yi, YTemps) += Ytbeta[0];
	 if (Ytestad_module) {
			Yting[0]=YD1_R23( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_STW2, &YG1Y_STW2, YNBS_STW2);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_STW2);
			if (!Ytesterrad_mod("STW2", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R22( Yi, YTemps);
	 Yting[1]=YS1_PER2( Yi);
	 memset(Yjac, 0, 10*sizeof(double));
	 YR23(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_R23, YNBI_R23, YMAX_JAC_NBI, &YG1Y_R23, Yjac[0], Ytbeta);
	 YG1_R22( Yi, YTemps) += Ytbeta[0];
	 YG1_PER2( Yi) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_R22( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[1]=YD1_PER2( Yi, 0);
			YLTRes = Yprosca(&YD1Y_R23, &YG1Y_R23, YNBS_R23);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_R23);
			if (!Ytesterrad_mod("R23", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R21( Yi, YTemps);
	 Yting[1]=YS1_Q2( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YR22(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_R22, YNBI_R22, YMAX_JAC_NBI, &YG1Y_R22, Yjac[0], Ytbeta);
	 YG1_R21( Yi, YTemps) += Ytbeta[0];
	 YG1_Q2( Yi, YTemps) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_R21( Yi, YTemps);
			Yting[1]=YD1_Q2( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_R22, &YG1Y_R22, YNBS_R22);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_R22);
			if (!Ytesterrad_mod("R22", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS2_R21( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YQ2(Yi)->backward( Yting[0] );
	 Yvsmatt (YNBS_Q2, YNBI_Q2, YMAX_JAC_NBI, &YG1Y_Q2, Yjac[0], Ytbeta);
	 YG2_R21( Yi, YTemps) += Ytbeta[0];
	 if (Ytestad_module) {
			Yting[0]=YD2_R21( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_Q2, &YG1Y_Q2, YNBS_Q2);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_Q2);
			if (!Ytesterrad_mod("Q2", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_STW2( Yi, YTemps-1);
	 Yting[1]=YS2_R15( Yi, YTemps);
	 Yting[2]=YS1_K2( Yi);
	 memset(Yjac, 0, 10*sizeof(double));
	 YR21(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmatt (YNBS_R21, YNBI_R21, YMAX_JAC_NBI, &YG1Y_R21, Yjac[0], Ytbeta);
	 YG1_STW2( Yi, YTemps-1) += Ytbeta[0];
	 YG2_R15( Yi, YTemps) += Ytbeta[1];
	 YG1_K2( Yi) += Ytbeta[2];
	 if (Ytestad_module) {
			Yting[0]=YD1_STW2( Yi, YTemps-1);
			Yting[1]=YD2_R15( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[2]=YD1_K2( Yi, 0);
			YLTRes = Yprosca(&YD1Y_R21, &YG1Y_R21, YNBS_R21);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_R21);
			if (!Ytesterrad_mod("R21", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R15( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YSTW1(Yi)->backward( Yting[0] );
	 Yvsmatt (YNBS_STW1, YNBI_STW1, YMAX_JAC_NBI, &YG1Y_STW1, Yjac[0], Ytbeta);
	 YG1_R15( Yi, YTemps) += Ytbeta[0];
	 if (Ytestad_module) {
			Yting[0]=YD1_R15( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_STW1, &YG1Y_STW1, YNBS_STW1);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_STW1);
			if (!Ytesterrad_mod("STW1", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R14( Yi, YTemps);
	 Yting[1]=YS1_PER1( Yi);
	 memset(Yjac, 0, 10*sizeof(double));
	 YR15(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_R15, YNBI_R15, YMAX_JAC_NBI, &YG1Y_R15, Yjac[0], Ytbeta);
	 YG1_R14( Yi, YTemps) += Ytbeta[0];
	 YG1_PER1( Yi) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_R14( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[1]=YD1_PER1( Yi, 0);
			YLTRes = Yprosca(&YD1Y_R15, &YG1Y_R15, YNBS_R15);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_R15);
			if (!Ytesterrad_mod("R15", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS2_R14( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YQ1(Yi)->backward( Yting[0] );
	 Yvsmatt (YNBS_Q1, YNBI_Q1, YMAX_JAC_NBI, &YG1Y_Q1, Yjac[0], Ytbeta);
	 YG2_R14( Yi, YTemps) += Ytbeta[0];
	 if (Ytestad_module) {
			Yting[0]=YD2_R14( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_Q1, &YG1Y_Q1, YNBS_Q1);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_Q1);
			if (!Ytesterrad_mod("Q1", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R13( Yi, YTemps);
	 Yting[1]=YS1_R12( Yi, YTemps);
	 Yting[2]=YS1_STW1( Yi, YTemps-1);
	 Yting[3]=YS2_Soil4( Yi, YTemps);
	 memset(Yjac, 0, 10*sizeof(double));
	 YR14(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yvsmatt (YNBS_R14, YNBI_R14, YMAX_JAC_NBI, &YG1Y_R14, Yjac[0], Ytbeta);
	 YG1_R13( Yi, YTemps) += Ytbeta[0];
	 YG1_R12( Yi, YTemps) += Ytbeta[1];
	 YG1_STW1( Yi, YTemps-1) += Ytbeta[2];
	 YG2_Soil4( Yi, YTemps) += Ytbeta[3];
	 if (Ytestad_module) {
			Yting[0]=YD1_R13( Yi, YTemps);
			Yting[1]=YD1_R12( Yi, YTemps);
			Yting[2]=YD1_STW1( Yi, YTemps-1);
			Yting[3]=YD2_Soil4( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_R14, &YG1Y_R14, YNBS_R14);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_R14);
			if (!Ytesterrad_mod("R14", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R11( Yi, YTemps);
	 Yting[1]=YS1_R12( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YR13(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_R13, YNBI_R13, YMAX_JAC_NBI, &YG1Y_R13, Yjac[0], Ytbeta);
	 YG1_R11( Yi, YTemps) += Ytbeta[0];
	 YG1_R12( Yi, YTemps) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_R11( Yi, YTemps);
			Yting[1]=YD1_R12( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_R13, &YG1Y_R13, YNBS_R13);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_R13);
			if (!Ytesterrad_mod("R13", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R11( Yi, YTemps);
	 Yting[1]=YS1_K1( Yi);
	 Yting[2]=YS1_ALPHA( Yi);
	 memset(Yjac, 0, 5*sizeof(double));
	 YR12(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmatt (YNBS_R12, YNBI_R12, YMAX_JAC_NBI, &YG1Y_R12, Yjac[0], Ytbeta);
	 YG1_R11( Yi, YTemps) += Ytbeta[0];
	 YG1_K1( Yi) += Ytbeta[1];
	 YG1_ALPHA( Yi) += Ytbeta[2];
	 if (Ytestad_module) {
			Yting[0]=YD1_R11( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[1]=YD1_K1( Yi, 0);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[2]=YD1_ALPHA( Yi, 0);
			YLTRes = Yprosca(&YD1Y_R12, &YG1Y_R12, YNBS_R12);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_R12);
			if (!Ytesterrad_mod("R12", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_STW1( Yi, YTemps-1);
	 Yting[1]=YS2_Soil4( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YR11(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_R11, YNBI_R11, YMAX_JAC_NBI, &YG1Y_R11, Yjac[0], Ytbeta);
	 YG1_STW1( Yi, YTemps-1) += Ytbeta[0];
	 YG2_Soil4( Yi, YTemps) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_STW1( Yi, YTemps-1);
			Yting[1]=YD2_Soil4( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_R11, &YG1Y_R11, YNBS_R11);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_R11);
			if (!Ytesterrad_mod("R11", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS2_ETR4( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YSW(Yi)->backward( Yting[0] );
	 Yvsmatt (YNBS_SW, YNBI_SW, YMAX_JAC_NBI, &YG1Y_SW, Yjac[0], Ytbeta);
	 YG2_ETR4( Yi, YTemps) += Ytbeta[0];
	 if (Ytestad_module) {
			Yting[0]=YD2_ETR4( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_SW, &YG1Y_SW, YNBS_SW);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_SW);
			if (!Ytesterrad_mod("SW", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_ETR3( Yi, YTemps);
	 Yting[1]=YS1_ETR2( Yi, YTemps);
	 Yting[2]=YS1_Soil4( Yi, YTemps);
	 memset(Yjac, 0, 10*sizeof(double));
	 YETR4(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmatt (YNBS_ETR4, YNBI_ETR4, YMAX_JAC_NBI, &YG1Y_ETR4, Yjac[0], Ytbeta);
	 YG1_ETR3( Yi, YTemps) += Ytbeta[0];
	 YG1_ETR2( Yi, YTemps) += Ytbeta[1];
	 YG1_Soil4( Yi, YTemps) += Ytbeta[2];
	 if (Ytestad_module) {
			Yting[0]=YD1_ETR3( Yi, YTemps);
			Yting[1]=YD1_ETR2( Yi, YTemps);
			Yting[2]=YD1_Soil4( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_ETR4, &YG1Y_ETR4, YNBS_ETR4);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_ETR4);
			if (!Ytesterrad_mod("ETR4", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_ETR2( Yi, YTemps);
	 Yting[1]=YS1_Soil4( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YETR3(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_ETR3, YNBI_ETR3, YMAX_JAC_NBI, &YG1Y_ETR3, Yjac[0], Ytbeta);
	 YG1_ETR2( Yi, YTemps) += Ytbeta[0];
	 YG1_Soil4( Yi, YTemps) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_ETR2( Yi, YTemps);
			Yting[1]=YD1_Soil4( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_ETR3, &YG1Y_ETR3, YNBS_ETR3);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_ETR3);
			if (!Ytesterrad_mod("ETR3", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_ETR1( Yi, YTemps);
	 Yting[1]=YS1_ETP( Yi, YTemps);
	 Yting[2]=YS1_Soil4( Yi, YTemps);
	 memset(Yjac, 0, 5*sizeof(double));
	 YETR2(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmatt (YNBS_ETR2, YNBI_ETR2, YMAX_JAC_NBI, &YG1Y_ETR2, Yjac[0], Ytbeta);
	 YG1_ETR1( Yi, YTemps) += Ytbeta[0];
	 YG1_ETP( Yi, YTemps) += Ytbeta[1];
	 YG1_Soil4( Yi, YTemps) += Ytbeta[2];
	 if (Ytestad_module) {
			Yting[0]=YD1_ETR1( Yi, YTemps);
			Yting[1]=YD1_ETP( Yi, YTemps);
			Yting[2]=YD1_Soil4( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_ETR2, &YG1Y_ETR2, YNBS_ETR2);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_ETR2);
			if (!Ytesterrad_mod("ETR2", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_Soil4( Yi, YTemps);
	 Yting[1]=YS1_PWP( Yi);
	 memset(Yjac, 0, 10*sizeof(double));
	 YETR1(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_ETR1, YNBI_ETR1, YMAX_JAC_NBI, &YG1Y_ETR1, Yjac[0], Ytbeta);
	 YG1_Soil4( Yi, YTemps) += Ytbeta[0];
	 YG1_PWP( Yi) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_Soil4( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[1]=YD1_PWP( Yi, 0);
			YLTRes = Yprosca(&YD1Y_ETR1, &YG1Y_ETR1, YNBS_ETR1);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_ETR1);
			if (!Ytesterrad_mod("ETR1", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_TT( Yi, YTemps);
	 Yting[1]=YS1_TM( Yi, YTemps);
	 Yting[2]=YS1_ETPM( Yi, YTemps);
	 Yting[3]=YS1_CEF( Yi);
	 memset(Yjac, 0, 5*sizeof(double));
	 YETP(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yvsmatt (YNBS_ETP, YNBI_ETP, YMAX_JAC_NBI, &YG1Y_ETP, Yjac[0], Ytbeta);
	 YG1_TT( Yi, YTemps) += Ytbeta[0];
	 YG1_TM( Yi, YTemps) += Ytbeta[1];
	 YG1_ETPM( Yi, YTemps) += Ytbeta[2];
	 YG1_CEF( Yi) += Ytbeta[3];
	 if (Ytestad_module) {
			Yting[0]=YD1_TT( Yi, YTemps);
			Yting[1]=YD1_TM( Yi, YTemps);
			Yting[2]=YD1_ETPM( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[3]=YD1_CEF( Yi, 0);
			YLTRes = Yprosca(&YD1Y_ETP, &YG1Y_ETP, YNBS_ETP);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_ETP);
			if (!Ytesterrad_mod("ETP", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_Soil3( Yi, YTemps);
	 Yting[1]=YS1_Soil1( Yi, YTemps);
	 Yting[2]=YS1_Soil2( Yi, YTemps);
	 memset(Yjac, 0, 10*sizeof(double));
	 YSoil4(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmatt (YNBS_Soil4, YNBI_Soil4, YMAX_JAC_NBI, &YG1Y_Soil4, Yjac[0], Ytbeta);
	 YG1_Soil3( Yi, YTemps) += Ytbeta[0];
	 YG1_Soil1( Yi, YTemps) += Ytbeta[1];
	 YG1_Soil2( Yi, YTemps) += Ytbeta[2];
	 if (Ytestad_module) {
			Yting[0]=YD1_Soil3( Yi, YTemps);
			Yting[1]=YD1_Soil1( Yi, YTemps);
			Yting[2]=YD1_Soil2( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_Soil4, &YG1Y_Soil4, YNBS_Soil4);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_Soil4);
			if (!Ytesterrad_mod("Soil4", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_Soil2( Yi, YTemps);
	 Yting[1]=YS1_FC( Yi);
	 memset(Yjac, 0, 5*sizeof(double));
	 YSoil3(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_Soil3, YNBI_Soil3, YMAX_JAC_NBI, &YG1Y_Soil3, Yjac[0], Ytbeta);
	 YG1_Soil2( Yi, YTemps) += Ytbeta[0];
	 YG1_FC( Yi) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_Soil2( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[1]=YD1_FC( Yi, 0);
			YLTRes = Yprosca(&YD1Y_Soil3, &YG1Y_Soil3, YNBS_Soil3);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_Soil3);
			if (!Ytesterrad_mod("Soil3", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_Soil1( Yi, YTemps);
	 Yting[1]=YS1_AUFTHL12( Yi, YTemps);
	 Yting[2]=YS1_SW( Yi, YTemps-1);
	 memset(Yjac, 0, 5*sizeof(double));
	 YSoil2(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmatt (YNBS_Soil2, YNBI_Soil2, YMAX_JAC_NBI, &YG1Y_Soil2, Yjac[0], Ytbeta);
	 YG1_Soil1( Yi, YTemps) += Ytbeta[0];
	 YG1_AUFTHL12( Yi, YTemps) += Ytbeta[1];
	 YG1_SW( Yi, YTemps-1) += Ytbeta[2];
	 if (Ytestad_module) {
			Yting[0]=YD1_Soil1( Yi, YTemps);
			Yting[1]=YD1_AUFTHL12( Yi, YTemps);
			Yting[2]=YD1_SW( Yi, YTemps-1);
			YLTRes = Yprosca(&YD1Y_Soil2, &YG1Y_Soil2, YNBS_Soil2);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_Soil2);
			if (!Ytesterrad_mod("Soil2", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_AUFTHL12( Yi, YTemps);
	 Yting[1]=YS1_SW( Yi, YTemps-1);
	 Yting[2]=YS1_FC( Yi);
	 Yting[3]=YS1_BE( Yi);
	 memset(Yjac, 0, 5*sizeof(double));
	 YSoil1(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3] );
	 Yvsmatt (YNBS_Soil1, YNBI_Soil1, YMAX_JAC_NBI, &YG1Y_Soil1, Yjac[0], Ytbeta);
	 YG1_AUFTHL12( Yi, YTemps) += Ytbeta[0];
	 YG1_SW( Yi, YTemps-1) += Ytbeta[1];
	 YG1_FC( Yi) += Ytbeta[2];
	 YG1_BE( Yi) += Ytbeta[3];
	 if (Ytestad_module) {
			Yting[0]=YD1_AUFTHL12( Yi, YTemps);
			Yting[1]=YD1_SW( Yi, YTemps-1);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[2]=YD1_FC( Yi, 0);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[3]=YD1_BE( Yi, 0);
			YLTRes = Yprosca(&YD1Y_Soil1, &YG1Y_Soil1, YNBS_Soil1);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_Soil1);
			if (!Ytesterrad_mod("Soil1", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_AUFTHL11( Yi, YTemps);
	 Yting[1]=YS1_Snow( Yi, YTemps);
	 Yting[2]=YS1_AUFT( Yi);
	 memset(Yjac, 0, 10*sizeof(double));
	 YAUFTHL12(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmatt (YNBS_AUFTHL12, YNBI_AUFTHL12, YMAX_JAC_NBI, &YG1Y_AUFTHL12, Yjac[0], Ytbeta);
	 YG1_AUFTHL11( Yi, YTemps) += Ytbeta[0];
	 YG1_Snow( Yi, YTemps) += Ytbeta[1];
	 YG1_AUFT( Yi) += Ytbeta[2];
	 if (Ytestad_module) {
			Yting[0]=YD1_AUFTHL11( Yi, YTemps);
			Yting[1]=YD1_Snow( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[2]=YD1_AUFT( Yi, 0);
			YLTRes = Yprosca(&YD1Y_AUFTHL12, &YG1Y_AUFTHL12, YNBS_AUFTHL12);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_AUFTHL12);
			if (!Ytesterrad_mod("AUFTHL12", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_Snow( Yi, YTemps);
	 Yting[1]=YS1_HL1( Yi);
	 memset(Yjac, 0, 5*sizeof(double));
	 YAUFTHL11(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_AUFTHL11, YNBI_AUFTHL11, YMAX_JAC_NBI, &YG1Y_AUFTHL11, Yjac[0], Ytbeta);
	 YG1_Snow( Yi, YTemps) += Ytbeta[0];
	 YG1_HL1( Yi) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_Snow( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[1]=YD1_HL1( Yi, 0);
			YLTRes = Yprosca(&YD1Y_AUFTHL11, &YG1Y_AUFTHL11, YNBS_AUFTHL11);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_AUFTHL11);
			if (!Ytesterrad_mod("AUFTHL11", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_PE( Yi, YTemps);
	 Yting[1]=YS1_TT( Yi, YTemps);
	 Yting[2]=YS1_TC( Yi);
	 Yting[3]=YS1_degd( Yi);
	 Yting[4]=YS2_Snow( Yi, YTemps-1);
	 memset(Yjac, 0, 10*sizeof(double));
	 YSnow(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yvsmatt (YNBS_Snow, YNBI_Snow, YMAX_JAC_NBI, &YG1Y_Snow, Yjac[0], Ytbeta);
	 YG1_PE( Yi, YTemps) += Ytbeta[0];
	 YG1_TT( Yi, YTemps) += Ytbeta[1];
	 YG1_TC( Yi) += Ytbeta[2];
	 YG1_degd( Yi) += Ytbeta[3];
	 YG2_Snow( Yi, YTemps-1) += Ytbeta[4];
	 if (Ytestad_module) {
			Yting[0]=YD1_PE( Yi, YTemps);
			Yting[1]=YD1_TT( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[2]=YD1_TC( Yi, 0);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[3]=YD1_degd( Yi, 0);
			Yting[4]=YD2_Snow( Yi, YTemps-1);
			YLTRes = Yprosca(&YD1Y_Snow, &YG1Y_Snow, YNBS_Snow);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_Snow);
			if (!Ytesterrad_mod("Snow", YLTRes,YAdRes)) return(0);
	 }

}

	 return(0);
}

int Yforward_traj_Tm(int nbp)
{
	Ycurward=FORWARD;
	 Yforward_space_Sm();
	 return(0);
}

int Ylinward_traj_Tm(int nbp)
{
	Ycurward=LINWARD;
	 Ylinward_space_Sm();
	 return(0);
}

int Ydfward_traj_Tm(int modop, char *nmmod, int All, int KeKo, int koleft,float pdx, float ptol, int yi, int yj, int yk)
{
	 int nbko=0;
	 if (!Ydftesttt(1)) return(0);
	 nbko += Ydfward_space_Sm(modop, nmmod, All, KeKo, koleft, pdx, ptol, yi, yj, yk);
	 return(nbko);
}

int Ydfward_traj_maille_Tm(int modop, char *nmmod, int All, int KeKo,  float pdx, float ptol)
{
	 int nbko=0;
	 if (!Ydftesttt(1)) return(0);
	 nbko += Ydfward_space_maille_Sm(modop, nmmod, All, KeKo, pdx, ptol);
	 return(nbko);
}

int Ybackward_traj_Tm(int nbp)
{
	Ycurward=BACKWARD;
	 Ybackward_space_Sm();
	 return(0);
}

int Yforward_order()
{
	 Yforward_traj_Tm(0);
	 return(0);
}

int Ylinward_order()
{
	 Ylinward_traj_Tm(0);
	 return(0);
}

int Ydfward_order(int modop, char *nmmod, int All, int KeKo, int koleft, float pdx, float ptol, int yi, int yj, int yk)
{
	 int nbko=0;
	 nbko += Ydfward_traj_Tm(modop, nmmod, All, KeKo, koleft, pdx, ptol, yi, yj, yk);
	 return(nbko);
}

int Ydfward_order_maille(int modop, char *nmmod, int All, int KeKo,  float pdx, float ptol)
{
	 int nbko=0;
	 nbko += Ydfward_traj_maille_Tm(modop, nmmod, All, KeKo, pdx, ptol);
	 return(nbko);
}

int Ybackward_order()
{
	 Ybackward_traj_Tm(0);
	 return(0);
}

void Yforward_operator (char type) 
{	
}
void Ylinward_operator (char type) 
{	
}
void Ybackward_operator (char type) 
{	
}

// ¤ ¤ ¤ ¤ ¤ ¤ ¤ ¤ LES FONCTIONS UTILISATEUR ... : 
int Yuser_call (int argc, char *argv[]) 
{
	 int codret=1;
	 if (strcmp(argv[0], "xdisplay") == 0)
		 xdisplay();
	 else if (strcmp(argv[0], "init") == 0)
		 init(argc, argv);
	 else codret=0;
	 return(codret);
}

//-------------- end Yao generation -----------------
